/**
 * @license Salesforce Commerce Cloud - Customer Service Center v24.1.2
 *
 * Date: 2023-12-11
 */
!function (global) {
'use strict';

dw$.invoke('Configuration', 'Messages', function(Configuration, Messages) {
    function onModuleReady() {
        // Locale specific formats
        var prefix = 'i18n.';
        _.forEach([ 'format.abbreviation', 'format.currency.USD', 'format.groupSeparator', 'format.decimalSeparator', 'format.integer', 'format.decimal', 'format.date', 'format.datetime', 'format.time', 'format.monthyear', 'pager.message.empty', 'pager.message.data', 'pager.message.range', 'pager.tooltip.previous', 'pager.tooltip.next' ], function(key) {
            Configuration[prefix + key] = Messages.get('common.' + prefix + key);
        });
        // These properties are only available after bootsrapping
        Configuration[prefix + 'format.dayNames'] = Messages.get('common.' + prefix + 'format.dayNames').split(',');
        Configuration[prefix + 'format.weekStart'] = parseInt(Messages.get('common.' + prefix + 'format.weekStart'), 10);
        Configuration[prefix + 'format.monthNames'] = Messages.get('common.' + prefix + 'format.monthNames').split(',');
        Configuration['i18n.search.button.addFilter'] = Messages.get('common.button.addFilter');
    }
    Configuration.ocapi = Configuration.ocapi || {};
    // Initialize module
    dw$.module('dw.ui.ecom.csc').config([ '$locationProvider', function($locationProvider) {
        $locationProvider.html5Mode(!1);
        $locationProvider.hashPrefix('');
    } ]).ready(onModuleReady);
    // Configure fallback data locale
    Configuration['i18n.locale'] = 'default';
    // Configure fallback UI locale
    var locale = window.location.href.match(/\/on\/demandware.store\/Sites-Site\/([^/]+)\/ScreenDispatcher-CSC/);
    locale && locale[1] ? Configuration['i18n.locale.ui'] = decodeURIComponent(locale[1]).replace(/_/g, '-') : Configuration['i18n.locale.ui'] = 'default';
    Configuration['i18n.messages.safe'] = !0;
    Configuration['i18n.oneRequest'] = !0;
    // Configure the default currency formatter. Data for this formats comes from the pipeline
    // "ViewApplication-GetCurrencyResourceBundle"
    Configuration['i18n.format.currency'] = function(code) {
        return 'Currency.' + code + '.format';
    };
    // Configure default interaction configurations
    // These configs only work if their properties are available before bootstrapping
    Configuration['i18n.default.confirm.title'] = 'common.title.confirm';
    Configuration['i18n.default.confirm.acceptLabel'] = 'common.label.confirmAccept';
    Configuration['i18n.default.confirm.rejectLabel'] = 'common.label.confirmCancel';
    Configuration['i18n.default.alert.title'] = 'common.title.alert';
    Configuration['i18n.default.alert.dismissLabel'] = 'common.label.alertDismiss';
});

dw$.invoke('ErrorMessages', function(ErrorMessages) {
    var prefix = 'common.error.validation.';
    ErrorMessages.validation({
        parse: prefix + 'parse',
        dw$required: prefix + 'required',
        dw$format: prefix + 'parse',
        dw$regexp: prefix + 'regexp',
        dw$email: prefix + 'email',
        dw$url: prefix + 'url',
        dw$enumeration: prefix + 'enumeration',
        dw$string: prefix + 'string',
        'dw$string.type': prefix + 'string',
        'dw$string.min': prefix + 'string.min',
        'dw$string.max': prefix + 'string.max',
        'dw$string.range': prefix + 'string.range',
        'dw$string.length': prefix + 'string.length',
        dw$number: prefix + 'number',
        'dw$number.type': prefix + 'number',
        'dw$number.min': prefix + 'number.min',
        'dw$number.min.exclusive': prefix + 'number.min.exclusive',
        'dw$number.max': prefix + 'number.max',
        'dw$number.max.exclusive': prefix + 'number.max.exclusive',
        'dw$number.range': prefix + 'number.range',
        'dw$number.range.exclusiveboth': prefix + 'number.range.exclusiveboth',
        'dw$number.range.exclusivemin': prefix + 'number.range.exclusivemin',
        'dw$number.range.exclusivemax': prefix + 'number.range.exclusivemax',
        dw$integer: prefix + 'integer',
        'dw$integer.type': prefix + 'integer',
        'dw$integer.min': prefix + 'integer.min',
        'dw$integer.min.exclusive': prefix + 'integer.min.exclusive',
        'dw$integer.max': prefix + 'integer.max',
        'dw$integer.max.exclusive': prefix + 'integer.max.exclusive',
        'dw$integer.range': prefix + 'integer.range',
        'dw$integer.range.exclusiveboth': prefix + 'integer.range.exclusiveboth',
        'dw$integer.range.exclusivemin': prefix + 'integer.range.exclusivemin',
        'dw$integer.range.exclusivemax': prefix + 'integer.range.exclusivemax'
    });
});

dw$.invoke('ErrorMessages', 'Messages', function(ErrorMessages, Messages) {
    function faultTypeMatcher(faultType) {
        return function(body) {
            return _.get(body, 'fault.type') === faultType;
        };
    }
    function faultMessageFormatter(obj) {
        var response = obj && obj.response && obj.response() || null, args = _.get(response, 'data.fault.arguments') || {};
        return dw$.formatNamedSafe(Messages.getSafeHtml(obj.message()), args);
    }
    function configure(status) {
        status = parseInt(status, 10);
        return function(faultType) {
            ErrorMessages.http(status, null, faultTypeMatcher(faultType), prefix + status + '.' + faultType, faultMessageFormatter);
        };
    }
    var prefix = 'common.error.http.', faultTypesMap = {
        400: [ // Generic errors
        'PropertyConstraintViolationException', 'ConstraintViolationException', 'MalformedSelectorException', 'InvalidExpandParameterException', 'HookStatusException', /**
			 * POST https://hostname:port/dw/data/v99_9/customer_lists/{customer_list_id}/customer_search
			 * @see CustomerSearchDataSource.search
			 */
        'CustomerSearchIndexingDisabledException', /**
			 * POST https://hostname:port/dw/shop/v99_9/order_search
			 * @see OrderSearchDataSource.search
			 */
        'OrderSearchIndexingDisabledException', /**
			 * PUT https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/customer
			 * @see BasketDataSource.customer
			 */
        'CustomerBasketsQuotaExceededException', /**
			 * POST https://hostname:port/dw/shop/v99_9/customers
			 * PATCH https://hostname:port/dw/shop/v99_9/customers/{customer_id}
			 * @see CustomerDataSource.update
			 */
        'MissingEmailException', 'MissingLastNameException', 'InvalidEmailException', 'LoginAlreadyInUseException', /**
			 * POST https://hostname:port/dw/shop/v99_9/customers/{customer_id}/addresses
			 */
        'InvalidCustomerAddressIdException', 'AddressIdAlreadyInUseException', /**
			 * POST   https://hostname:port/dw/shop/v99_9/orders/{order_no}/payment_instruments
			 * PATCH  https://hostname:port/dw/shop/v99_9/orders/{order_no}/payment_instruments/{payment_instrument_id}
			 * DELETE https://hostname:port/dw/shop/v99_9/orders/{order_no}/payment_instruments/{payment_instrument_id}
			 * @see OrderDataSource.paymentInstrument
			 */
        'InvalidOrderNumberException', 'InvalidPaymentMethodIdException', 'InvalidBankAccountNumberException', /**
			 * POST   https://hostname:port/dw/shop/v99_9/customization/basket_coupon
			 * DELETE https://hostname:port/dw/shop/v99_9/customization/basket_coupon
			 * @see BasketCoupons
			 */
        'MissingCouponCodeException', 'InvalidCouponCodeException', 'InvalidCouponItemException', 'InvalidCouponStatusException', /**
			 * PUT https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/shipping_method
			 * @see BasketDataSource.shippingMethod
			 */
        'InvalidShippingMethodIdException', /**
			 * POST   https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/price_adjustments
			 * DELETE https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/price_adjustments/{price_adjustment_id}
			 * @see BasketDataSource.priceAdjustment
			 * @see BasketDataSource.deletePriceAdjustment
			 */
        'InvalidShippingItemIdException', 'InvalidPriceAdjustmentItemIdException', 'InvalidPriceAdjustmentLevelException', 'CustomPriceAdjustmentNotFoundException', // TODO(seckardt): OMS-7295 - 'NotFoundException' usually should be a 404!
        'CustomPriceAdjustmentOrderLevelExistsException', 'CustomPriceAdjustmentProductLevelExistsException', 'CustomPriceAdjustmentShippingLevelExistsException', 'FixedPriceAdjustmentAlreadyExistsException', /**
			 * POST   https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/items
			 * PATCH  https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/items/{item_id}
			 * DELETE https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/items/{item_id}
			 * POST   https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/submit
			 * @see BasketDataSource.item
			 * @see BasketDataSource.updateItem
			 * @see BasketDataSource.itemQuantity
			 * @see BasketDataSource.deleteItem
			 * @see BasketDataSource.submit
			 */
        'QuotaExceededException', 'InvalidProductItemException', 'ProductItemNotAvailableException', 'InvalidProductIdException', 'InvalidProductItemIdException', 'InvalidProductItemInventoryException', 'InvalidProductItemQuantityException', 'InvalidProductTypeException', 'InvalidProductOptionItemException', 'InvalidProductOptionValueItemException', 'EmptyShippingAddressException', 'EmptyBillingAddressException', 'InvalidShippingAddressException', 'InvalidBillingAddressException', 'MissingShippingMethodIdException', 'MissingPaymentMethodIdException', 'InvalidPaymentMethodException', 'InvalidProductItemPriceException', 'InvalidProductOptionItemPriceException', /**
			 * POST https://hostname:port/dw/csc/v99_9/customization/price_adjustment
			 */
        'PriceAdjustmentLimitExceededException' ],
        403: [ // Generic errors
        'SecureCommunicationRequiredException', 'SiteOfflineException' ],
        404: [ // Generic errors
        'VersionNotFoundException', /**
			 * POST https://hostname:port/dw/shop/v99_9/customization/basket_coupon
			 * @see BasketCoupons
			 */
        'SourceCodeNotFoundException', /**
			 * GET https://hostname:port/dw/shop/v99_9/customers/{customer_id}
			 * @see CustomerDataSource.get
			 */
        'CustomerNotFoundException', /**
			 * GET https://hostname:port/dw/shop/v99_9/orders/{order_no}
			 * @see OrderDataSource.get
			 */
        'OrderNotFoundException', /**
			 * POST https://hostname:port/dw/shop/v99_9/orders/{order_no}/payment_instruments
			 * @see OrderDataSource.paymentInstrument
			 */
        'PaymentInstrumentNotFoundException', /**
			 * PUT https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/customer
			 * PUT https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/shipping_method
			 * @see BasketDataSource.customer
			 * @see BasketDataSource.shippingMethod
			 */
        'BasketNotFoundException', /**
			 * POST https://hostname:port/dw/shop/v99_9/baskets/{basket_id}/price_adjustments
			 * @see BasketDataSource.priceAdjustment
			 */
        'ProductItemNotFoundException', 'ShippingItemNotFoundException' ],
        409: [ // Generic errors
        'IfMatchRequiredException' ],
        412: [ // Generic errors
        'InvalidIfMatchException' ]
    };
    _.each(faultTypesMap, function(faultTypes, status) {
        _.each(faultTypes, configure(status));
    });
    // Generic HTTP status messages
    ErrorMessages.http(400, null, null, prefix + '400');
    ErrorMessages.http(401, null, null, prefix + '401');
    ErrorMessages.http(403, null, null, prefix + '403');
    ErrorMessages.http(404, null, null, prefix + '404');
    ErrorMessages.http(500, null, null, prefix + '500');
    // Generic fallback message to catch all unhandled errors
    ErrorMessages.http(function(status) {
        return status >= 400 && status <= 600;
    }, null, null, prefix + 'default');
});

!function() {
    function metaRootPath(rootPath) {
        var path = _.isBlank(rootPath) ? '/' : rootPath;
        path = 0 !== path.indexOf('/') ? '/' + path : path;
        // Ensure first char is a slash
        return path.lastIndexOf('/') !== path.length - 1 ? path + '/' : path;
    }
    function queryString() {
        return window.location.search;
    }
    dw$.invoke('Meta', 'Configuration', function(Meta, Configuration) {
        // This `read()` configures the  static resources root path ('dw-root-path'), the OCAPI settings ('dw-ocapi.client-id', 'dw-ocapi.version'), the BM user settings ('dw-bm.user.login', 'dw-bm.user.first-name', 'dw-bm.user.last-name') and the BM site settings ('dw-bm.site'). - Steffen
        Meta.read('dw-');
        // This ensures the `Configuration.rootPath` is correctly setup
        Configuration.rootPath = metaRootPath(Configuration.rootPath);
    });
    dw$.invoke('Preconditions', 'Configuration', function(Preconditions, Configuration) {
        function base() {
            var protocol = Configuration.ocapi.protocol || locationProtocol, host = Configuration.ocapi.host || locationHost;
            return protocol + '//' + host;
        }
        function obtainUiLocale() {
            return Configuration['i18n.locale.ui'] || Configuration['i18n.locale'];
        }
        function encodeOcapiComponent(value) {
            return encodeURIComponent(value).replace(/[!'()*]/g, function(c) {
                return '%' + c.charCodeAt(0).toString(16);
            });
        }
        function toQueryString(params) {
            var paramsString = '';
            !_.isEmpty(params) && _.each(params, function(value, key) {
                paramsString += paramsString ? '&' : '?';
                paramsString += encodeOcapiComponent(key) + '=' + encodeOcapiComponent(value);
            });
            return paramsString;
        }
        function removeSlashes(path) {
            if (path) {
                // Just a precaution in case the resource path starts or ends with slashes
                0 === path.indexOf('/') && (path = path.replace(/^\/+/, ''));
                path.lastIndexOf('/') === path.length - 1 && (path = path.replace(/\/+$/, ''));
            }
            return path;
        }
        function injectCsrf(url, forceNewToken) {
            if (_.isFunction(_.get(window, 'BMCSRFInjector.injectInURL'))) {
                // This aids in CSRF protection within Business Manager
                var urlWithNewCSRFToken = window.BMCSRFInjector.injectInURL(url), csrfTokenRegex = /csrf_token=[a-zA-Z0-9\-_]*/g, currentToken = window.location.href.match(csrfTokenRegex), newToken = urlWithNewCSRFToken.match(csrfTokenRegex);
                if (_.isUndefinedOrNull(currentToken) || _.isUndefinedOrNull(newToken) || forceNewToken) {
                    return urlWithNewCSRFToken;
                }
                return urlWithNewCSRFToken.replace(newToken[0], currentToken[0]);
            }
            return url;
        }
        function pipeline(site, name, params, forceNewCSRFToken) {
            Preconditions.checkString(site, 'site', 1);
            Preconditions.optional.checkString(name, 'name');
            Preconditions.optional.checkObject(params, 'params');
            return injectCsrf(base() + '/on/demandware.store/' + site + '/' + obtainUiLocale() + '/' + (name || '') + toQueryString(params), forceNewCSRFToken);
        }
        function bmlegacy(name, params, forceNewCSRFToken) {
            return pipeline('Sites-Site', name, params, forceNewCSRFToken);
        }
        function oauth() {
            return base() + '/dw/oauth2/access_token';
        }
        function ocapi(site, type, path, version, params) {
            Preconditions.checkString(site, 'site', 1);
            Preconditions.checkString(type, 'type', 1);
            Preconditions.optional.checkString(path, 'path');
            Preconditions.optional.checkString(version, 'version');
            path = removeSlashes(path);
            return base() + '/s/' + site + '/dw/' + type + '/' + (version || Configuration.ocapi.version) + '/' + (path || '') + toQueryString(params);
        }
        function data(site, path, version, params) {
            return ocapi(site, 'data', path, version, params);
        }
        function registerResource(template) {
            Preconditions.checkObject(template, 'template');
            Preconditions.checkString(template.id, 'id', 1);
            Preconditions.checkString(template.type, 'type', 1);
            ocapiResources[template.id] = _.omit(template, 'id');
        }
        function getResource(template) {
            Preconditions.checkString(template, 'template');
            return ocapiResources[template];
        }
        function getResourceUrl(path, params) {
            // Encode each parameter.
            _.each(params, function(value, key) {
                if ('version' === key || 'params' === key) {
                    // Skip `version` and `params` as they are special. `params` are encoded later in the `toQueryString` method.
                    return;
                }
                if (_.isArray(value)) {
                    // It's rare that a URL param will be an `Array` but the OCAPI standard for this is to wrap the values in parenthesis
                    var encoded = _.map(value, function(val) {
                        return encodeOcapiComponent(val);
                    }).join(',');
                    params[key] = encoded ? '(' + encoded + ')' : '';
                } else {
                    params[key] = encodeOcapiComponent(value);
                }
            });
            return dw$.formatNamed(path, params);
        }
        function obtainResource(template, parameters) {
            Preconditions.checkString(template, 'template');
            Preconditions.optional.checkObject(parameters, 'parameters');
            var params = parameters ? _.clone(parameters) : {};
            Preconditions.optional.checkString(params.version, 'version');
            var definition = ocapiResources[template];
            Preconditions.checkObject(definition, 'OCAPI resource definition');
            // Obtain resource path via fallback: Directly provided OCAPI version => Default resource version => Configured current OCAPI version
            var path = null, version = null;
            _.every([ params.version, definition.defaultVersion, Configuration.ocapi.version ], function(v) {
                if (v && definition[v]) {
                    path = definition[v];
                    version = v;
                    return !1;
                }
                return !0;
            });
            Preconditions.checkString(path, 'OCAPI resource path template', 1);
            Preconditions.checkString(version, 'OCAPI version', 1);
            // At some point there will not be a difference between these types. But in the meantime, while we transision this will help us keep them organized.
            var resourceUrl = getResourceUrl(path, params);
            switch (definition.type) {
              case 'csc':
                Preconditions.checkString(params.site_id, 'site_id');
                return csc(params.site_id, resourceUrl, version, params.params);

              case 'data':
                return data('-', resourceUrl, version, params.params);

              case 'dataLegacy':
                Preconditions.checkString(params.site_id, 'site_id');
                return data(params.site_id, resourceUrl, version, params.params);

              case 'shop':
                Preconditions.checkString(params.site_id, 'site_id');
                return shop(params.site_id, resourceUrl, version, params.params);

              case 'bm':
                return ocapi(params.site_id || '-', 'bm', resourceUrl, version, params.params);

              case 'meta':
                Preconditions.checkString(params.site_id, 'site_id');
                return meta(params.site_id, resourceUrl, version, params.params);
            }
        }
        function csc(site, path, version, params) {
            return ocapi(site, 'csc', path, version, params);
        }
        function shop(site, path, version, params) {
            return ocapi(site, 'shop', path, version, params);
        }
        function meta(site, path, version, params) {
            return ocapi(site, 'meta', path, version, params);
        }
        function bm(location, params, forceNewCSRFToken) {
            return void 0 === params ? bmlegacy('ViewApplication-BM#/' + (location || ''), forceNewCSRFToken) : injectCsrf(getResourceUrl('ViewApplication-BM#/?' + location, params), forceNewCSRFToken);
        }
        function batch() {
            return base() + '/s/-/dw/batch';
        }
        function content(path) {
            Preconditions.checkString(Configuration.rootPath, 'rootPath not configured');
            Preconditions.optional.checkString(path, 'path');
            return base() + Configuration.rootPath + (path || '');
        }
        function l10n(bundle) {
            Preconditions.checkString(bundle, 'bundle', 1);
            return bmlegacy('ViewApplication-GetResourceBundle', {
                BundleName: bundle,
                Format: 'properties'
            });
        }
        function i18n(bundle) {
            return l10n(bundle).replace('/' + Configuration['i18n.locale'] + '/', '/{locale}/');
        }
        function search(param) {
            var query = queryString();
            query = _.isNotBlank(query) ? query.substring(1) : '';
            var tokens = query.split('&'), pairs = {};
            _.each(tokens, function(token) {
                var pair = token.split('=', 2), value = pair[1];
                pairs[pair[0]] = _.isString(value) ? decodeURIComponent(value) : void 0;
            });
            return _.isNotBlank(param) ? pairs[param] : pairs;
        }
        function isOcapi(urlOrHttpRequest) {
            var isMap = _.isObjectMap(urlOrHttpRequest), url = isMap ? urlOrHttpRequest.url : urlOrHttpRequest;
            return REGEXP_OCAPI_URL.test(url);
        }
        function Urls() {}
        // Compute base page URL
        var locationProtocol = window.location.protocol, locationHost = window.location.host, REGEXP_OCAPI_URL = /\/s\/(.*)\/dw\/((data|shop|meta|csc|bm)\/v[0-9_]+\/|batch)/, ocapiResources = {};
        /**
	 * Returns the base URL to the currently used Ecom instance.
	 * @returns {string} The base URL to the currently used Ecom instance.
	 */
        Urls.prototype.base = base;
        /**
	 * Creates the URL to resolve the OAuth2 access token that is required to request the Data/Shop API resources on the same machine as the current application.
	 * @returns {string} The OAuth2 access token resolver URL.
	 */
        Urls.prototype.oauth = oauth;
        /**
	 * Getter/Setter method for OCAPI resource APIs. When called with only one param, it will register the provided object as a resource which can be used later. A template object accepts the following parameters:
	 *  * `id` - The identifier for the resource.
	 *  * `type` - The type of resource (data/shop/meta).
	 *  * `defaultVersion` - The version of the API which should be called if no specific version is provided.
	 *  * `v**.*` - The template URL to be used for the specified version of the API.
	 * @param {string|Object} template When passed as an object this is the resource object that will be registered.
	 * When passed as a string it is the id for the resource whose URL is being requested.
	 * @param {Object} [params] Parameters for the corresponding template id to call a specific version pass 'version':'vxx.x'. To append query parameters to the URL pass 'params': {}
	 * @returns {string|Urls} The Data API resource URL.
	 */
        Urls.prototype.resource = function(template, params) {
            if (_.isPlainObject(template)) {
                registerResource.call(this, template);
                return this;
            }
            return obtainResource.call(this, template, params);
        };
        /**
	 * Retrieves the configuration object for the given resource ID.
	 * @param {string} the template ID for the registered resource
	 * @returns {Object} The configuration object registered for the given resourceID
	 */
        Urls.prototype.getResource = getResource;
        /**
	 * Creates a URL of a page/pipeline of a Demandware Ecom application running on the same machine as the current application.
	 * @param {string} site
	 * @param {string} [name]
	 * @param {Object} [params] Query string parameters.
	 * @returns {string} The legacy Business Manager page/pipeline URL.
	 */
        Urls.prototype.pipeline = pipeline;
        /**
	 * Creates a URL of a page/pipeline of the legacy Business Manager application running on the same machine as the current application.
	 * @param {string} [name]
	 * @param {Object} [params] Query string parameters.
	 * @param {Boolean} [forceNewCSRFToken] Forces a new csrf token to be generated. Whenever this is passed the browser will be forced to do a full page reload.
	 * @returns {string} The legacy Business Manager page/pipeline URL.
	 */
        Urls.prototype.bmlegacy = bmlegacy;
        /**
	 * Creates a URL of a location inside the (new) Business Manager application running on the same machine as the current application.
	 * @param {string} [location]
	 * @param {Object} [params] Query string parameters.
	 * @param {Boolean} [forceNewCSRFToken] Forces a new csrf token to be generated. Whenever this is passed the browser will be forced to do a full page reload.
	 * @returns {string} The Business Manager app location URL.
	 */
        Urls.prototype.bm = bm;
        /**
	 * Returns the URL for batch API calls.
	 * @returns {string} The batch URL.
	 */
        Urls.prototype.batch = batch;
        /**
	 * Creates a URL of a resource in the static content location on the same machine as the current application.
	 * @param {string} [path]
	 * @returns {string} The static content resource URL.
	 */
        Urls.prototype.content = content;
        /**
	 * Creates a URL of a localization resource bundle on the same machine as the current application.
	 * @param {string} bundle
	 * @returns {string} The L10n resource bundle URL.
	 */
        Urls.prototype.l10n = l10n;
        /**
	 * Creates a URL of a localization resource bundle on the same machine as the current application. To meet the requirements of Buist's built-in I18N lookup, the only difference between `l10n` and `i18n` is the fact that the current locale portion in the URL is replaced with `/{locale}/`.
	 * @param {string} bundle
	 * @returns {string} The L10n resource bundle URL.
	 */
        Urls.prototype.i18n = i18n;
        /**
	 * Either returns an Object hash with key-value pairs of all of the current URL's query string parameters in a decoded form, or just returns the decoded value of a specific/given query string parameter.
	 * @param {string} [param]
	 * @returns {(Object|string)} An Object hash of all of the current URL's query string parameters, or the value of a specific/given query string parameter, if `param` is defined.
	 */
        Urls.prototype.search = search;
        /**
	 * Utility to encode the URI component for use in OCAPI APIs.
	 * @param {string} value The value to encode.
	 * @returns {string} The encoded string.
	 */
        Urls.prototype.encodeOcapiComponent = encodeOcapiComponent;
        /**
	 * Utility to decode the URI component for use in OCAPI APIs.
	 * @param {string} value The value to encode.
	 * @returns {string} The encoded string.
	 */
        Urls.prototype.decodeOcapiComponent = decodeURIComponent;
        /**
	 * Creates a query string expression out of a given object hash.
	 * @param {Object} [params]
	 * @returns {string} The query string expression created out of the given object hash.
	 */
        Urls.prototype.toQueryString = toQueryString;
        /**
	* Check if it is Ocapi http request.
	* @param {(string | Object)} http request object or request url string
	*/
        Urls.prototype.isOcapi = isOcapi;
        // Define `Urls` constant
        dw$.constant('Urls', new Urls());
    });
    !function() {
        function serializeData(data) {
            if (!_.isPlainObject(data)) {
                // Defer to native stringification
                return _.isUndefinedOrNull(data) ? '' : data.toString();
            }
            // Serialize properties
            var buffer = [];
            _.each(data, function(value, key) {
                buffer.push(encodeURIComponent(key) + '=' + (_.isUndefinedOrNull(value) ? '' : encodeURIComponent(value)));
            });
            // Serialize the buffer and clean it up for transportation
            return buffer.join('&').replace(/%20/g, '+');
        }
        function HttpFormRequestSerializer() {}
        HttpFormRequestSerializer.prototype.serialize = serializeData;
        dw$.constant('HttpFormRequestSerializer', new HttpFormRequestSerializer());
    }();
    dw$.define('dw.QueryBuilder.Filter', {
        constructor: function() {},
        member: {}
    });
    dw$.define('dw.QueryBuilder.Query', {
        constructor: function() {},
        member: {}
    });
    /** ---------------------------------------------------------------------------
 * Query Builder
 * -------------------------------------------------------------------------- */
    dw$.invoke('Preconditions', function(Preconditions) {
        function evaluateConfig(cfg) {
            cfg && cfg.type || (cfg = {
                type: 'match_all'
            });
            switch (cfg.type) {
              case 'filtered_query':
                return dw$.create('dw.QueryBuilder.FilteredQuery', cfg);

              case 'bool_query':
                return dw$.create('dw.QueryBuilder.BoolQuery', cfg);

              case 'term_query':
                return dw$.create('dw.QueryBuilder.TermQuery', cfg);

              case 'nested_query':
                return dw$.create('dw.QueryBuilder.NestedQuery', cfg);

              case 'text_query':
                return dw$.create('dw.QueryBuilder.TextQuery', cfg);

              case 'bool_filter':
                return dw$.create('dw.QueryBuilder.BoolFilter', cfg);

              case 'query_filter':
                return dw$.create('dw.QueryBuilder.QueryFilter', cfg);

              case 'range_filter':
                return dw$.create('dw.QueryBuilder.RangeFilter', cfg);

              case 'term_filter':
                return dw$.create('dw.QueryBuilder.TermFilter', cfg);
            }
            return dw$.create('dw.QueryBuilder.MatchAllQuery', cfg);
        }
        function evaluateFilter(filter) {
            // If the filter doesn't have a value or the value is "ALL". We should exclude it from the query for performance
            // reasons. However, a valud of false should still be allowed.
            if (void 0 !== filter.value && null !== filter.value) {
                var attr = filter.attribute(), type = attr.type();
                switch (type) {
                  case 'string':
                    return dw$.create('dw.QueryBuilder.QueryFilter', {
                        query: {
                            type: 'text_query',
                            fields: attr.attributes(),
                            search_phrase: filter.value,
                            phrase_type: 'text'
                        }
                    });

                  case 'enum':
                  case 'tag':
                    // BM-specific filter => TODO(seckardt): Evaluate `define()` approach for app-specific filter types.
                    return dw$.create('dw.QueryBuilder.TermFilter', {
                        field: attr.attribute(),
                        values: function(value) {
                            return _.isArray(value) ? value : [ value ];
                        }(filter.value)
                    });

                  case 'date':
                  case 'datetime':
                  case 'date-instance':
                  // BM-specific filter
                    case 'datetime-instance':
                    // BM-specific filter
                    return dw$.create('dw.QueryBuilder.RangeFilter', {
                        field: attr.attribute(),
                        from: filter.isEndValue ? null : filter.value,
                        to: filter.isEndValue ? filter.value : null,
                        from_inclusive: null,
                        to_inclusive: null,
                        format: type
                    });

                  case 'date-range':
                  case 'datetime-range':
                    return dw$.create('dw.QueryBuilder.RangeFilter', {
                        field: attr.attribute(),
                        from: filter.value.from,
                        to: filter.value.to,
                        from_inclusive: null,
                        to_inclusive: null,
                        format: type
                    });

                  case 'bm_date_range':
                    // BM-specific filter
                    return dw$.create('dw.QueryBuilder.RangeFilter', {
                        field: filter.value.from_field,
                        to_field: filter.value.to_field,
                        from: filter.value.from_value,
                        to: filter.value.to_value,
                        from_inclusive: filter.value.from_inclusive,
                        to_inclusive: filter.value.to_inclusive,
                        format: filter.value.format,
                        filter_mode: filter.value.filter_mode
                    });
                }
                return dw$.create('dw.QueryBuilder.TermFilter', {
                    field: attr.attribute(),
                    values: [ filter.value ]
                });
            }
        }
        dw$.define('dw.QueryBuilder.QueryBuilder', {
            constructor: function() {},
            member: {
                FILTER_BOOL: 'bool_filter',
                FILTER_QUERY: 'query_filter',
                FILTER_RANGE: 'range_filter',
                FILTER_RANGE_2: 'range2_filter',
                FILTER_TERM: 'term_filter',
                QUERY_BOOL: 'bool_query',
                QUERY_FILTERED: 'filtered_query',
                QUERY_MATCH_ALL: 'match_all_query',
                QUERY_NESTED: 'nested_query',
                QUERY_TERM: 'term_query',
                QUERY_TEXT: 'text_query',
                SCORE_AVERAGE: 'avg',
                SCORE_TOTAL: 'total',
                SCORE_MAX: 'max',
                SCORE_NONE: 'none',
                OPERATOR_OR: 'or',
                OPERATOR_AND: 'and',
                OPERATOR_NOT: 'not',
                OPERATOR_NOT_EQUAL: 'neq',
                OPERATOR_ONE_OF: 'one_of',
                OPERATOR_NOT_IN: 'not_in',
                OPERATOR_IS: 'is',
                OPERATOR_IS_NULL: 'is_null',
                OPERATOR_IS_NOT_NULL: 'is_not_null',
                OPERATOR_LESS_THAN: 'less',
                OPERATOR_GREATER_THAN: 'greater',
                PHRASE_TYPE_LUCENE: 'lucene',
                PHRASE_TYPE_TEXT: 'text',
                build: function(cfg) {
                    Preconditions.checkNotNull(cfg, 'cfg');
                    var config = cfg;
                    _.isArray(config) || (config = [ config ]);
                    var newObj = [];
                    _.each(config, function(objDefn) {
                        var newQry;
                        dw$.Class.getClass('dw.QueryBuilder.Query').isInstance(objDefn) || dw$.Class.getClass('dw.QueryBuilder.Filter').isInstance(objDefn) ? newQry = objDefn : objDefn instanceof dw$.SearchFilter ? newQry = evaluateFilter(objDefn) : 'object' == typeof objDefn && (newQry = evaluateConfig(objDefn));
                        newQry && newObj.push(newQry);
                    });
                    if (1 === newObj.length) {
                        return newObj[0];
                    }
                    if (newObj.length > 1) {
                        return newObj;
                    }
                }
            }
        });
        dw$.constant('QueryBuilder', dw$.create('dw.QueryBuilder.QueryBuilder', {}));
    });
    dw$.invoke('QueryBuilder', function(QueryBuilder) {
        dw$.define('dw.QueryBuilder.BoolFilter', {
            extend: 'dw.QueryBuilder.Filter',
            constructor: function(config) {
                this._filters = [];
                this._operator = null;
                config.operator && this.operator(config.operator);
                if (config.filters) {
                    _.isArray(config.filters) || (config.filters = [ config.filters ]);
                    this.filters(config.filters);
                }
            },
            member: {
                toJson: function() {
                    var obj = {};
                    obj[QueryBuilder.FILTER_BOOL] = {
                        operator: this._operator || QueryBuilder.OPERATOR_AND
                    };
                    if (this._filters.length > 0) {
                        var filters = obj[QueryBuilder.FILTER_BOOL].filters = [];
                        _.each(this._filters, function(filter) {
                            var jsonStr = filter.toJson();
                            jsonStr && filters.push(jsonStr);
                        });
                    }
                    if (obj[QueryBuilder.FILTER_BOOL].filters.length > 0) {
                        return obj;
                    }
                },
                operator: function(operator) {
                    if (arguments.length > 0) {
                        switch (operator) {
                          case QueryBuilder.OPERATOR_OR:
                            this._operator = QueryBuilder.OPERATOR_OR;
                            break;

                          case QueryBuilder.OPERATOR_NOT:
                            this._operator = QueryBuilder.OPERATOR_NOT;
                            break;

                          case QueryBuilder.OPERATOR_AND:
                            this._operator = QueryBuilder.OPERATOR_AND;
                            break;

                          default:
                            throw new Error('BoolFilter operator does not support "' + operator + '". Only "and", "or", and "not" are allowed');
                        }
                    }
                    return this._operator;
                },
                filters: function(filters) {
                    if (arguments.length > 0) {
                        this._filters = [];
                        _.isArray(filters) || (filters = [ filters ]);
                        var me = this;
                        _.each(filters, function(filter) {
                            me.addFilter(filter);
                        });
                    }
                    return this._filters;
                },
                addFilter: function(filter) {
                    this._filters.push(QueryBuilder.build(filter));
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', function(QueryBuilder) {
        dw$.define('dw.QueryBuilder.QueryFilter', {
            extend: 'dw.QueryBuilder.Filter',
            constructor: function(config) {
                this._query = null;
                config.query && this.query(config.query);
            },
            member: {
                toJson: function() {
                    var obj = {};
                    if (this._query) {
                        var jsonStr = this._query.toJson();
                        jsonStr && (obj.query = jsonStr);
                    }
                    if (obj.query) {
                        var output = {};
                        output[QueryBuilder.FILTER_QUERY] = obj;
                        return output;
                    }
                },
                query: function(query) {
                    arguments.length > 0 && (this._query = QueryBuilder.build(query));
                    return this._query;
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', 'Preconditions', function(QueryBuilder, Preconditions) {
        function formatValue(format, value) {
            // We can rewrite this later. But to get a fix for APP-37549 out the door, we just need to ensure that the time component is 0 in UTC time to ensure the dates actually get sent correctly to the server.
            if (_.includes([ 'date', 'date-range' ], format)) {
                // Since we are changing the date value we need to first clone it to ensure we don't mess up the values being displayed on the UI.
                var clone = new Date(value);
                // First we undo the timezone offset by turning the offset (which is in minutes) to milliseconds, then subtrack that from the time.
                clone.setTime(clone.getTime() - 60 * clone.getTimezoneOffset() * 1e3);
                // Then we set the time values individually to 0
                clone.setUTCHours(0);
                clone.setUTCMinutes(0);
                clone.setUTCSeconds(0);
                clone.setUTCMilliseconds(0);
                return clone;
            }
            return value;
        }
        dw$.define('dw.QueryBuilder.RangeFilter', {
            extend: 'dw.QueryBuilder.Filter',
            constructor: function(config) {
                this._from_field = null;
                this._to_field = null;
                this._from = null;
                this._to = null;
                this._from_inclusive = null;
                this._to_inclusive = null;
                this._format = null;
                this._filter_mode = null;
                // used for `range2_filter`
                config.format && this.format(config.format);
                config.field && this.field(config.field);
                config.to_field && this.toField(config.to_field);
                config.from && this.from(config.from);
                config.to && this.to(config.to);
                config.from_inclusive && this.fromInclusive(config.from_inclusive);
                config.to_inclusive && this.toInclusive(config.to_inclusive);
                config.filter_mode && this.filterMode(config.filter_mode);
            },
            member: {
                toJson: function() {
                    var obj = {};
                    // Only if two field names aren't the same, we should use 'range2_filter', otherwise continue using 'range_filter'
                    if (this._from_field && this._to_field && this._from_field !== this._to_field) {
                        obj[QueryBuilder.FILTER_RANGE_2] = {
                            from_field: this._from_field,
                            to_field: this._to_field,
                            from_value: this._from,
                            to_value: this._to,
                            from_inclusive: this._from_inclusive,
                            to_inclusive: this._to_inclusive
                        };
                        // `filter_mode` is an optional field
                        this._filter_mode && (obj[QueryBuilder.FILTER_RANGE_2].filter_mode = this._filter_mode);
                    } else {
                        obj[QueryBuilder.FILTER_RANGE] = {
                            field: this._from_field,
                            from: this._from,
                            to: this._to,
                            from_inclusive: this._from_inclusive,
                            to_inclusive: this._to_inclusive
                        };
                    }
                    return obj;
                },
                field: function(field) {
                    arguments.length > 0 && (this._from_field = field);
                    return this._from_field;
                },
                toField: function(field) {
                    arguments.length > 0 && (this._to_field = field);
                    return this._to_field;
                },
                filterMode: function(mode) {
                    arguments.length > 0 && (this._filter_mode = mode);
                    return this._filter_mode;
                },
                from: function(from) {
                    _.isDate(from) && (from = formatValue(this._format, from).toISOString());
                    from && (this._from = from);
                    return this._from;
                },
                to: function(to) {
                    _.isDate(to) && (to = formatValue(this._format, to).toISOString());
                    to && (this._to = to);
                    return this._to;
                },
                fromInclusive: function(inclusive) {
                    Preconditions.optional.checkBoolean(inclusive);
                    arguments.length > 0 && (this._from_inclusive = inclusive);
                    return this._from_inclusive;
                },
                toInclusive: function(inclusive) {
                    Preconditions.optional.checkBoolean(inclusive);
                    arguments.length > 0 && (this._to_inclusive = inclusive);
                    return this._to_inclusive;
                },
                format: function(format) {
                    Preconditions.optional.checkString(format);
                    arguments.length > 0 && (this._format = format);
                    return this._format;
                }
            }
        });
    });
    dw$.invoke('Preconditions', 'QueryBuilder', function(Preconditions, QueryBuilder) {
        var validOperators = [ QueryBuilder.OPERATOR_IS, QueryBuilder.OPERATOR_ONE_OF, QueryBuilder.OPERATOR_IS_NULL, QueryBuilder.OPERATOR_IS_NOT_NULL, QueryBuilder.OPERATOR_LESS_THAN, QueryBuilder.OPERATOR_GREATER_THAN, QueryBuilder.OPERATOR_NOT_IN, QueryBuilder.OPERATOR_NOT_EQUAL ];
        dw$.define('dw.QueryBuilder.TermFilter', {
            extend: 'dw.QueryBuilder.Filter',
            constructor: function(config) {
                this._field = null;
                this._operator = null;
                this._values = [];
                config.field && this.field(config.field);
                config.operator && this.operator(config.operator);
                config.values && this.values(config.values);
            },
            member: {
                toJson: function() {
                    if (this._values) {
                        var obj = {};
                        obj[QueryBuilder.FILTER_TERM] = {
                            field: this._field,
                            operator: this.operator(),
                            values: this._values
                        };
                        return obj;
                    }
                },
                field: function(field) {
                    Preconditions.optional.checkString(field, 'field');
                    arguments.length > 0 && (this._field = field);
                    return this._field;
                },
                operator: function(operator) {
                    if (arguments.length > 0) {
                        if (!_.includes(validOperators, operator)) {
                            throw new Error('TermFilter operator does not support "' + operator + '". Only "one_of","is", "null", and "not_null" are allowed');
                        }
                        this._operator = operator;
                    }
                    // To be smart if no operator has been set we will return a smart evaluation for
                    // the operator based on the number of values.
                    if (!this._operator) {
                        if (this._values.length > 1) {
                            return QueryBuilder.OPERATOR_ONE_OF;
                        }
                        if (1 === this._values.length) {
                            return QueryBuilder.OPERATOR_IS;
                        }
                        return QueryBuilder.OPERATOR_IS_NULL;
                    }
                    return this._operator;
                },
                values: function(values) {
                    if (arguments.length > 0) {
                        this._values = [];
                        _.isArray(values) || (values = [ values ]);
                        var me = this;
                        _.each(values, function(value) {
                            me.addValue(value);
                        });
                    }
                    return this._values;
                },
                addValue: function(value) {
                    // The buist/ext search filter always returns string values.
                    if (_.isUndefinedOrNull(value) || 'undefined' === value || 'null' === value) {
                        return;
                    }
                    _.includes(this._values, value) || this._values.push(value);
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', function(QueryBuilder) {
        dw$.define('dw.QueryBuilder.BoolQuery', {
            extend: 'dw.QueryBuilder.Query',
            constructor: function(config) {
                this._must = [];
                this._should = [];
                this._must_not = [];
                config.must && this.must(config.must);
                config.should && this.should(config.should);
                config.must_not && this.mustNot(config.must_not);
            },
            member: {
                toJson: function() {
                    var newQry = {};
                    newQry[QueryBuilder.QUERY_BOOL] = {};
                    var obj = newQry[QueryBuilder.QUERY_BOOL];
                    if (this._must.length > 0) {
                        obj.must = [];
                        _.each(this._must, function(query) {
                            var jsonStr = query.toJson();
                            jsonStr && obj.must.push(jsonStr);
                        });
                    }
                    if (this._should.length > 0) {
                        obj.should = [];
                        _.each(this._should, function(query) {
                            var jsonStr = query.toJson();
                            jsonStr && obj.should.push(jsonStr);
                        });
                    }
                    if (this._must_not.length > 0) {
                        obj.must_not = [];
                        _.each(this._must_not, function(query) {
                            var jsonStr = query.toJson();
                            jsonStr && obj.must_not.push(jsonStr);
                        });
                    }
                    if (obj.must && obj.must.length > 0 || obj.should && obj.should.length > 0 || obj.must_not && obj.must_not.length > 0) {
                        return newQry;
                    }
                },
                must: function(must) {
                    if (arguments.length > 0) {
                        this._must = [];
                        _.isArray(must) || (must = [ must ]);
                        var me = this;
                        _.each(must, function(query) {
                            me.addMust(query);
                        });
                    }
                    return this._must;
                },
                addMust: function(must) {
                    _.includes(this._must, must) || this._must.push(QueryBuilder.build(must));
                },
                should: function(should) {
                    if (arguments.length > 0) {
                        this._should = [];
                        _.isArray(should) || (should = [ should ]);
                        var me = this;
                        _.each(should, function(query) {
                            me.addShould(query);
                        });
                    }
                    return this._should;
                },
                addShould: function(should) {
                    _.includes(this._should, should) || this._should.push(QueryBuilder.build(should));
                },
                mustNot: function(must_not) {
                    if (arguments.length > 0) {
                        this._must_not = [];
                        _.isArray(must_not) || (must_not = [ must_not ]);
                        var me = this;
                        _.each(must_not, function(query) {
                            me.addMustNot(query);
                        });
                    }
                    return this._must_not;
                },
                addMustNot: function(must_not) {
                    _.includes(this._must_not, must_not) || this._must_not.push(QueryBuilder.build(must_not));
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', function(QueryBuilder) {
        dw$.define('dw.QueryBuilder.FilteredQuery', {
            extend: 'dw.QueryBuilder.Query',
            constructor: function(config) {
                this._filter = null;
                this._query = null;
                config.filter && this.filter(config.filter);
                config.query && this.query(config.query);
            },
            member: {
                toJson: function() {
                    var qryObj = {};
                    if (this._filter) {
                        var filterStr = this._filter.toJson();
                        filterStr && (qryObj.filter = filterStr);
                    }
                    if (this._query) {
                        var queryStr = this._query.toJson();
                        queryStr && (qryObj.query = queryStr);
                    } else {
                        qryObj.query = QueryBuilder.build({
                            type: QueryBuilder.QUERY_MATCH_ALL
                        }).toJson();
                    }
                    if (qryObj.query && qryObj.filter) {
                        var obj = {};
                        obj[QueryBuilder.QUERY_FILTERED] = qryObj;
                        return obj;
                    }
                    if (qryObj.query) {
                        return qryObj.query;
                    }
                },
                filter: function(filter) {
                    if (arguments.length > 0) {
                        filter = QueryBuilder.build(filter);
                        _.isArray(filter) && (filter = QueryBuilder.build({
                            type: QueryBuilder.FILTER_BOOL,
                            filters: filter
                        }));
                        this._filter = filter;
                    }
                    return this._filter;
                },
                query: function(query) {
                    arguments.length > 0 && (this._query = QueryBuilder.build(query));
                    return this._query;
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', function(QueryBuilder) {
        dw$.define('dw.QueryBuilder.MatchAllQuery', {
            extend: 'dw.QueryBuilder.Query',
            constructor: function() {},
            member: {
                toJson: function() {
                    var obj = {};
                    obj[QueryBuilder.QUERY_MATCH_ALL] = {};
                    return obj;
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', function(QueryBuilder) {
        dw$.define('dw.QueryBuilder.NestedQuery', {
            extend: 'dw.QueryBuilder.Query',
            constructor: function(config) {
                this._path = null;
                this._query = null;
                this._score_mode = QueryBuilder.SCORE_NONE;
                config.path && this.path(config.path);
                config.query && this.query(config.query);
                config.score_mode && this.scoreMode(config.score_mode);
            },
            member: {
                toJson: function() {
                    var obj = {};
                    if (this._query) {
                        var jsonStr = this._query.toJson();
                        jsonStr && (obj.query = jsonStr);
                    }
                    obj.path = this._path || '';
                    obj.score_mode = this._score_mode || QueryBuilder.SCORE_NONE;
                    if (obj.query) {
                        var output = {};
                        output[QueryBuilder.QUERY_NESTED] = obj;
                        return output;
                    }
                },
                scoreMode: function(mode) {
                    if (arguments.length > 0) {
                        switch (mode) {
                          case QueryBuilder.SCORE_AVERAGE:
                            this._score_mode = QueryBuilder.SCORE_AVERAGE;
                            break;

                          case QueryBuilder.SCORE_TOTAL:
                            this._score_mode = QueryBuilder.SCORE_TOTAL;
                            break;

                          case QueryBuilder.SCORE_MAX:
                            this._score_mode = QueryBuilder.SCORE_MAX;
                            break;

                          case QueryBuilder.SCORE_NONE:
                            this._score_mode = QueryBuilder.SCORE_NONE;
                            break;

                          default:
                            throw new Error('NestedQuery mode does not support "' + mode + '". Only "avg", "total", "max", and "none" are allowed');
                        }
                    }
                    return this._score_mode;
                },
                path: function(path) {
                    arguments.length > 0 && (this._path = path);
                    return this._path;
                },
                query: function(query) {
                    arguments.length > 0 && (this._query = QueryBuilder.build(query));
                    return this._query;
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', 'Preconditions', function(QueryBuilder, Preconditions) {
        dw$.define('dw.QueryBuilder.TermQuery', {
            extend: 'dw.QueryBuilder.Query',
            constructor: function(config) {
                this._fields = null;
                this._operator = null;
                this._values = [];
                config.fields && this.fields(config.fields);
                config.operator && this.operator(config.operator);
                config.values && this.values(config.values);
            },
            member: {
                toJson: function() {
                    var obj = {};
                    obj[QueryBuilder.QUERY_TERM] = {
                        operator: this.operator(),
                        fields: this._fields,
                        values: this._values
                    };
                    return obj;
                },
                fields: function(fields) {
                    if (arguments.length > 0) {
                        _.isString(fields) && (fields = [ fields ]);
                        this._fields = fields;
                    }
                    return this._fields;
                },
                addField: function(field) {
                    Preconditions.checkString(field, 'field');
                    _.includes(this._fields, field) || this._fields.push(field);
                },
                operator: function(operator) {
                    if (arguments.length > 0) {
                        switch (operator) {
                          case QueryBuilder.OPERATOR_ONE_OF:
                            this._operator = QueryBuilder.OPERATOR_ONE_OF;
                            break;

                          case QueryBuilder.OPERATOR_IS_NULL:
                            this._operator = QueryBuilder.OPERATOR_IS_NULL;
                            break;

                          case QueryBuilder.OPERATOR_IS_NOT_NULL:
                            this._operator = QueryBuilder.OPERATOR_IS_NOT_NULL;
                            break;

                          case QueryBuilder.OPERATOR_IS:
                            this._operator = QueryBuilder.OPERATOR_IS;
                            break;

                          default:
                            throw new Error('TermQuery operator does not support "' + operator + '". Only "one_of","is", "null", and "not_null" are allowed');
                        }
                    }
                    // To be smart if no operator has been set we will return a smart evaluation for
                    // the operator based on the number of values.
                    if (!this._operator) {
                        return this._values.length > 1 ? QueryBuilder.OPERATOR_ONE_OF : 1 === this._values.length ? QueryBuilder.OPERATOR_IS : QueryBuilder.OPERATOR_IS_NULL;
                    }
                    return this._operator;
                },
                values: function(values) {
                    if (arguments.length > 0) {
                        this._values = [];
                        _.isArray(values) || (values = [ values ]);
                        var me = this;
                        _.each(values, function(value) {
                            me.addValue(value);
                        });
                    }
                    return this._values;
                },
                addValue: function(value) {
                    // The buist/ext search filter always returns string values.
                    if (_.isUndefinedOrNull(value) || 'undefined' === value || 'null' === value) {
                        return;
                    }
                    _.includes(this._values, value) || this._values.push(value);
                }
            }
        });
    });
    dw$.invoke('QueryBuilder', 'Preconditions', function(QueryBuilder, Preconditions) {
        dw$.define('dw.QueryBuilder.TextQuery', {
            extend: 'dw.QueryBuilder.Query',
            constructor: function(config) {
                this._fields = [];
                this._phrase_type = null;
                this._search_phrase = null;
                config.fields && this.fields(config.fields);
                config.search_phrase && this.searchPhrase(config.search_phrase);
                config.phrase_type && this.phraseType(config.phrase_type);
            },
            member: {
                toJson: function() {
                    var obj = {};
                    obj[QueryBuilder.QUERY_TEXT] = {
                        search_phrase: this.searchPhrase() || '',
                        fields: this.fields()
                    };
                    return obj;
                },
                fields: function(fields) {
                    if (arguments.length > 0) {
                        _.isString(fields) && (fields = [ fields ]);
                        this._fields = fields;
                    }
                    return this._fields;
                },
                addField: function(field) {
                    Preconditions.checkString(field, 'field');
                    _.includes(this._fields, field) || this._fields.push(field);
                },
                phraseType: function(phrase_type) {
                    if (arguments.length > 0) {
                        switch (phrase_type) {
                          case QueryBuilder.PHRASE_TYPE_LUCENE:
                            this._phrase_type = QueryBuilder.PHRASE_TYPE_LUCENE;
                            break;

                          case QueryBuilder.PHRASE_TYPE_TEXT:
                            this._phrase_type = QueryBuilder.PHRASE_TYPE_TEXT;
                            break;

                          default:
                            throw new Error('TextQuery phrase_type does not support "' + phrase_type + '". Only "lucene" and "text" are allowed');
                        }
                    }
                    return this._phrase_type;
                },
                searchPhrase: function(search_phrase) {
                    arguments.length > 0 && (this._search_phrase = search_phrase);
                    return this._search_phrase;
                }
            }
        });
    });
    !function() {
        var CONTENT_TYPE = 'application/x-www-form-urlencoded;charset=utf-8';
        /**
	 * Important: For the sake of testability of applications that use `buist-ecom`, an approach has been chosen to use `dw$.config` instead of simply using `dw$.invoke` here. That way the OAuth2 handler created/registered by a former test run will always be removed when newly registering an OAuth2 handler for the same matcher. - Steffen
	 */
        dw$.config([ 'Configuration', 'AuthHandlers', 'AuthHandlerOAuth2', 'Urls', 'HttpFormRequestSerializer', function(Configuration, AuthHandlers, AuthHandlerOAuth2, Urls, HttpFormRequestSerializer) {
            function obtainAuthRequestConfig() {
                return {
                    url: Urls.oauth(),
                    data: {
                        client_id: Configuration.ocapi.clientId,
                        grant_type: 'urn:demandware:params:oauth:grant-type:client-id:dwsid:dwsecuretoken'
                    },
                    headers: {
                        'Content-type': CONTENT_TYPE,
                        'Content-Type': CONTENT_TYPE
                    },
                    transformRequest: HttpFormRequestSerializer.serialize
                };
            }
            function prepareRequest(requestCfg) {
                if ('PUT' === requestCfg.method) {
                    requestCfg.method = 'POST';
                    requestCfg.headers['x-dw-http-method-override'] = 'PUT';
                }
                requestCfg.headers['x-dw-client-id'] = Configuration.ocapi.clientId;
            }
            function requiresReauthentication(httpResponse) {
                return 401 === httpResponse.status && _.includes([ 'InvalidAccessTokenException', 'InvalidSecureTokenException', 'UnauthorizedException', 'ExpiredTokenException' ], _.get(httpResponse, 'data.fault.type'));
            }
            var authHandler = AuthHandlerOAuth2.$new(obtainAuthRequestConfig).prepareRequest(prepareRequest).requiresReauthentication(requiresReauthentication);
            AuthHandlers.entry(Urls.isOcapi, authHandler.request, authHandler.response);
        } ]);
    }();
}();

dw$.invoke('Configuration', 'Urls', function(Configuration, Urls) {
    function cscCustomizationUrlMatcher(config) {
        return 'POST' === _.get(config, 'method') && _.isPlainObject(_.get(config, 'data')) && cscCustomizationUrlRegex.test(_.get(config, 'url'));
    }
    function obtainRootPath() {
        // Iterate through the list of available <script>s starting at the end as most-likely our <script> is located there
        var scriptNodes = document.getElementsByTagName('script'), scriptNode = _.findLast(scriptNodes, function(node) {
            return _.isNotBlank(node.getAttribute('data-main'));
        });
        if (!scriptNode) {
            return null;
        }
        var token = 'application/csc/', dataMain = scriptNode.getAttribute('data-main');
        return dataMain.substring(0, dataMain.lastIndexOf(token) + token.length);
    }
    function pendoSnippet() {
        return "\t <div class=\"dw-csc-pendo-init\">\t\t<script>\t\t\t/* PENDO INITIALIZATION */\t\t\t(function(p,e,n,d,o){\t\t\t\tvar v,w,x,y,z;o=p[d]=p[d]||{};\t\t\t\to._q=[];\t\t\t\tv=[\"initialize\",\"identify\",\"updateOptions\",\"pageLoad\"];\t\t\t\tfor(w=0,x=v.length;w<x;++w)\t\t\t\t\t(function(m){\t\t\t\t\t\to[m]=o[m]||function(){\t\t\t\t\t\t\to._q[m===v[0]?\"unshift\":\"push\"]([m].concat([].slice.call(arguments,0)));\t\t\t\t\t\t};\t\t\t\t\t})(v[w]);\t\t\t\ty=e.createElement(n);\t\t\t\ty.async=!0;\t\t\t\ty.src=\"../../jscript/pendo/pendo_csc.js\";\t\t\t\tz=e.getElementsByTagName(n)[0];\t\t\t\tz.parentNode.insertBefore(y,z);\t\t\t})(window,document,\"script\",\"pendo\");\t\t</script>\t </div>";
    }
    // Configure `rootPath`
    Configuration.rootPath = obtainRootPath();
    // Provide `Site` constant
    var site = Urls.search('site') || _.get(Configuration.env, 'site.site_id') || 'SiteGenesis', cscCustomizationUrlRegex = /\/csc\/v[0-9_]+\/customization\//;
    dw$.constant('SiteId', site);
    dw$.constant('Site', 'Sites-' + site + '-Site');
    // Configure module
    dw$.module('dw.ui.ecom.csc').css('css/dw.ui.ecom.csc.app.css').i18n(Urls.i18n('csc_app')).i18n(Urls.bmlegacy('ViewApplication-GetCurrencyResourceBundle', {
        symbols: !0
    })).js('../../jscript/pendo/pendo_csc.js').config([ 'NullingUndefinedHttpInterceptorProvider', function(NullingUndefinedHttpInterceptorProvider) {
        NullingUndefinedHttpInterceptorProvider.always(cscCustomizationUrlMatcher);
    } ]).route('/', {
        template: "<div class=\"dw-viewport dw-layout-frame dw-ui-reset\">  <div class=\"dw-layout dw-layout-fixed-sidebar dw-layout-sidebar-collapsed\">    <div class=\"dw-layout-header\">      <div class=\"dw-layout-row\">        <div class=\"csc-header-logo\"><img src=\"" + Urls.content('img/logo.svg') + "\" title=\"Salesforce Commerce Cloud\" /></div>        <div class=\"csc-header-tabs\"></div>        <div class=\"csc-header-menu dw-float-right\">          <csc-user-menu></csc-user-menu>        </div>      </div>    </div>  \t <div class=\"dw-layout-content\">      <dw:workspaces dw-workspaces-header-target=\"'.dw-layout-header .csc-header-tabs'\"></dw:workspaces>    </div>    <div class=\"dw-layout-sidebar dw-layout-sidebar-left is-visible\">      <csc-sidebar></csc-sidebar>    </div>    <div class=\"dw-layout-sidebar dw-layout-sidebar-right dw-layout-sidebar-right-medium\">      <div class=\"dw-layout-sidebar-header ng-hide\"></div>      <div class=\"dw-layout-sidebar-body\"></div>      <div class=\"dw-layout-sidebar-footer ng-hide\"></div>    </div>" + pendoSnippet() + "  </div></div>",
        controller: 'SpacesCtrl',
        reloadOnSearch: !1,
        resolve: {
            cscInit: [ 'RoutesInit', function(RoutesInit) {
                return RoutesInit.init();
            } ]
        }
    }).route('/nonav/', {
        template: "<div class=\"dw-viewport dw-layout-frame dw-ui-reset csc-crosscloud-nonav\">  <div class=\"dw-layout\">    <div class=\"dw-layout-header\">      <div class=\"dw-layout-row\">        <div class=\"csc-header-tabs csc-crosscloud-no-show-children\"></div>        <div class=\"csc-header-menu dw-float-right\">          <csc-cross-cloud-user-menu></csc-cross-cloud-user-menu>        </div>      </div>    </div>  \t <div class=\"dw-layout-content\">      <dw:workspaces dw-workspaces-header-target=\"'.dw-layout-header .csc-header-tabs'\"></dw:workspaces>    </div>    <div class=\"dw-layout-sidebar dw-layout-sidebar-right dw-layout-sidebar-right-medium\">      <div class=\"dw-layout-sidebar-header ng-hide\"></div>      <div class=\"dw-layout-sidebar-body\"></div>      <div class=\"dw-layout-sidebar-footer ng-hide\"></div>    </div>" + pendoSnippet() + "  </div></div>",
        controller: 'SpacesCtrl',
        reloadOnSearch: !1,
        resolve: {
            cscInit: [ 'RoutesInit', function(RoutesInit) {
                return RoutesInit.init();
            } ]
        }
    }).route('/noframe/', {
        template: "<div class=\"dw-viewport dw-layout-frame dw-ui-reset csc-crosscloud-noframe\">  <div class=\"dw-layout-header csc-crosscloud-no-show\"></div>  <div class=\"dw-layout\">  \t <div class=\"dw-layout-content\">      <dw:workspaces dw-workspaces-header-target=\"'.dw-layout-header'\">></dw:workspaces>    </div>    <div class=\"dw-layout-sidebar dw-layout-sidebar-right dw-layout-sidebar-right-medium\">      <div class=\"dw-layout-sidebar-header ng-hide\"></div>      <div class=\"dw-layout-sidebar-body\"></div>      <div class=\"dw-layout-sidebar-footer ng-hide\"></div>    </div>" + pendoSnippet() + "  </div></div>",
        controller: 'SpacesCtrl',
        reloadOnSearch: !1,
        resolve: {
            cscInit: [ 'RoutesInit', function(RoutesInit) {
                return RoutesInit.init();
            } ]
        }
    });
});

dw$.invoke('Urls', 'Configuration', function(Urls, Configuration) {
    function ocapi(id, type, path, version) {
        var definition = {
            id: id,
            type: type,
            defaultVersion: version
        };
        definition[version] = path;
        return definition;
    }
    function shop(id, path, version) {
        return ocapi(id, 'shop', path, version || Configuration.ocapi.version);
    }
    function data(id, path, version) {
        return ocapi(id, 'data', path, version || Configuration.ocapi.version);
    }
    function data999(id, path) {
        return data(id, path, 'v99_9');
    }
    function csc(id, path, version) {
        return ocapi(id, 'csc', path, version);
    }
    function csc999(id, path) {
        return csc(id, path, 'v99_9');
    }
    Configuration.ocapi = Configuration.ocapi || {};
    _.defaults(Configuration.ocapi, {
        clientId: 'cd669706-3638-4dd1-a8b2-310ab900ca53',
        version: 'v17_8'
    });
    Urls.resource(shop('ORDER_SEARCH', 'order_search')).resource(shop('ORDER', 'orders/{order_no}')).resource(shop('ORDER_PAYMENTINSTRUMENT', 'orders/{order_no}/payment_instruments/{payment_instrument_id}')).resource(shop('ORDER_NOTES', 'orders/{order_no}/notes')).resource(shop('ORDER_NOTE', 'orders/{order_no}/notes/{note_id}')).resource(shop('PRODUCT_SEARCH', 'product_search')).resource(shop('PRODUCT', 'products/{product_id}')).resource(data999('CUSTOMER_SEARCH', 'customer_lists/{customer_list_id}/customer_search')).resource(shop('CUSTOMER', 'customers/{customer_id}')).resource(shop('CUSTOMER_ADDRESSES', 'customers/{customer_id}/addresses')).resource(shop('CUSTOMER_ADDRESS_DELETE', 'customers/{customer_id}/addresses/{address_name}')).resource(shop('CUSTOMER_AUTH', 'customers/{customer_id}/auth')).resource(shop('CUSTOMER_BASKETS', 'customers/{customer_id}/baskets')).resource(shop('CUSTOMER_ORDERS', 'customers/{customer_id}/orders')).resource(shop('CUSTOMER_PASSWORDRESET', 'customers/{customer_id}/password_reset')).resource(shop('BASKETS', 'baskets')).resource(shop('BASKET', 'baskets/{basket_id}')).resource(shop('BASKET_COUPONS', 'baskets/{basket_id}/coupons/')).resource(shop('BASKET_COUPON', 'baskets/{basket_id}/coupons/{coupon_item_id}')).resource(shop('BASKET_CUSTOMER', 'baskets/{basket_id}/customer')).resource(shop('BASKET_ITEMS', 'baskets/{basket_id}/items')).resource(shop('BASKET_ITEM', 'baskets/{basket_id}/items/{item_id}')).resource(shop('BASKET_PAYMENTINSTRUMENT', 'baskets/{basket_id}/payment_instruments/{payment_instrument_id}')).resource(shop('BASKET_PRICEADJUSTMENT', 'baskets/{basket_id}/price_adjustments/{price_adjustment_id}')).resource(shop('BASKET_SHIPMENTS', 'baskets/{basket_id}/shipments')).resource(shop('BASKET_SHIPMENT', 'baskets/{basket_id}/shipments/{shipment_id}')).resource(shop('BASKET_SHIPMENT_SHIPPINGMETHODS', 'baskets/{basket_id}/shipments/{shipment_id}/shipping_methods')).resource(shop('BASKET_SHIPMENT_SHIPPINGMETHOD', 'baskets/{basket_id}/shipments/{shipment_id}/shipping_method')).resource(shop('BASKET_HAND_OFF', 'baskets/{basket_id}/storefront')).resource(shop('SESSIONS', 'sessions')).resource(csc999('CUSTOMIZATION_AREA', 'customization/{area_id}')).resource(csc999('CUSTOMIZATION_GRID', 'grids/csc/{grid_id}'));
});

dw$.invoke('Configuration', function(Configuration) {
    function has(permission) {
        return _.get(Configuration.env, 'permissions[' + permission + ']') === !0;
    }
    function Permissions() {}
    Permissions.prototype.has = has;
    Permissions.prototype.orderSearch = function() {
        return has('search_orders');
    };
    Permissions.prototype.orderCreate = function() {
        return has('create_order_on_behalf_of');
    };
    Permissions.prototype.adjustItem = function() {
        return has('adjust_item_price');
    };
    Permissions.prototype.adjustShipping = function() {
        return has('adjust_shipping_price');
    };
    Permissions.prototype.adjustOrder = function() {
        return has('adjust_order_price');
    };
    Permissions.prototype.deleteOrderNote = function() {
        return has('delete_order_note');
    };
    Permissions.prototype.readOnlySupport = function() {
        return has('read_only_support');
    };
    Permissions.prototype.loginOnBehalf = function() {
        return has('login_on_behalf');
    };
    dw$.constant('Permissions', new Permissions());
});

dw$.invoke('Workspaces', function(Workspaces) {
    function WorkspacesManager(unique) {
        _unique.set(this, unique === !0);
    }
    function obtainSpace(type, route, state) {
        var newSpace = {
            type: type || null,
            route: route || null,
            state: _.isEmpty(state) ? null : state
        }, isDefaultSpace = _.includes(defaultSpaceTypeAliases, newSpace.type);
        return _.find(Workspaces.spaces(), function(space) {
            if (isDefaultSpace && _.includes(defaultSpaceTypeAliases, space.type())) {
                return space;
            }
            return _.isEqual(newSpace, {
                type: space.type() || null,
                route: space.route() || null,
                state: _.isEmpty(space.state()) ? null : space.state()
            });
        });
    }
    function open($q, type, route, state) {
        if (_unique.get(this)) {
            var storedSpace = obtainSpace(type, route, state);
            if (storedSpace) {
                Workspaces.activate(storedSpace.id());
                return $q.resolve(storedSpace);
            }
            return Workspaces.open.apply(Workspaces, _.tail(arguments));
        }
        return Workspaces.open.apply(Workspaces, _.tail(arguments));
    }
    function navigate($q, id, type, route, state) {
        if (_unique.get(this)) {
            var storedSpace = obtainSpace(type, route, state);
            if (storedSpace) {
                Workspaces.activate(storedSpace.id());
                return $q.resolve(storedSpace);
            }
            return Workspaces.navigate.apply(Workspaces, _.tail(arguments));
        }
        return Workspaces.navigate.apply(Workspaces, _.tail(arguments));
    }
    var _unique = dw$.hide('WorkspacesManager.unique'), defaultSpaceTypeAliases = [ 'unknown', 'empty', 'unauthorized', 'error', 'welcome' ];
    WorkspacesManager.prototype.open = dw$.inject('$q', open);
    WorkspacesManager.prototype.navigate = dw$.inject('$q', navigate);
    var mgr = new WorkspacesManager();
    mgr.unique = new WorkspacesManager((!0));
    dw$.constant('WorkspacesManager', mgr);
});

dw$.invoke('Preconditions', 'ObjectPath', function(Preconditions, ObjectPath) {
    function TemplateBuilderFactory() {
        _typesFactory.set(this, {});
        _decoratorsFactory.set(this, {});
    }
    function createFactory() {
        return new TemplateBuilderFactory();
    }
    function createBuilder() {
        return new TemplateBuilder(this);
    }
    function registerFactory(container) {
        return function(type, handler) {
            var l = arguments.length;
            Preconditions.checkNumber(l, 'arguments.length', 0, 2);
            var entry = container.get(this);
            if (2 === l) {
                // Set handler for given type
                Preconditions.checkString(type, 'type', 1);
                Preconditions.checkFunction(handler, 'handler');
                entry[type] = handler;
                return this;
            }
            if (_.isFunction(type)) {
                // Set default handler in case the first argument is a function
                entry[DEFAULT_TEMPLATE_KEY] = type;
                return this;
            }
            Preconditions.optional.checkString(type, 'type', 1);
            var registeredHandler = type && entry[type];
            return registeredHandler || entry[DEFAULT_TEMPLATE_KEY];
        };
    }
    function TemplateBuilder(factory, parent) {
        Preconditions.checkArgument(factory instanceof TemplateBuilderFactory, 'Not a TemplateBuilderFactory: factory');
        Preconditions.checkArgument(_.isUndefinedOrNull(parent) || parent instanceof TemplateBuilder, 'Not a TemplateBuilder: parent');
        _factory.set(this, factory);
        _types.set(this, {});
        _decorators.set(this, {});
        parent && _parent.set(this, parent);
    }
    function create() {
        var factory = _factory.get(this);
        return new TemplateBuilder(factory, this);
    }
    function register(container, method) {
        return function(type, handler) {
            var l = arguments.length;
            Preconditions.checkNumber(l, 'arguments.length', 0, 2);
            var entry = container.get(this);
            if (2 === l) {
                // Set handler for given type
                Preconditions.checkString(type, 'type', 1);
                Preconditions.checkFunction(handler, 'handler');
                entry[type] = handler;
                return this;
            }
            if (_.isFunction(type)) {
                // Set default handler in case the first argument is a function
                entry[DEFAULT_TEMPLATE_KEY] = type;
                return this;
            }
            Preconditions.optional.checkString(type, 'type', 1);
            // Either use the named handler or default handler defined at instance-level
            var registeredHandler = type && entry[type], defaultHandler = entry[DEFAULT_TEMPLATE_KEY];
            if (registeredHandler) {
                return registeredHandler;
            }
            if (defaultHandler) {
                return defaultHandler;
            }
            // If no named or default handler is available at instance-level, walk up the instance's parent hierarchy.
            var parent = _parent.get(this);
            if (parent) {
                return parent[method](type);
            }
            // If even the root instance doesn't contain a handler, use the named or default handler that is defined at
            // factory-level, if applicable.
            return _factory.get(this)[method](type);
        };
    }
    function decorators(type) {
        var l = arguments.length;
        Preconditions.checkNumber(l, 'arguments.length', 0, 1);
        Preconditions.optional.checkString(type, 'type', 1);
        var response = [], entry = _decorators.get(this), registeredHandler = type && entry[type], defaultHandler = entry[DEFAULT_TEMPLATE_KEY];
        registeredHandler ? response.push(registeredHandler) : defaultHandler && response.push(defaultHandler);
        // If no named or default handler is available at instance-level, walk up the instance's parent hierarchy.
        var parent = _parent.get(this);
        if (parent) {
            return parent.decorators(type).concat(response);
        }
        // If even the root instance doesn't contain a handler, use the named or default handler that is defined at
        // factory-level, if applicable.
        var factoryDecorator = _factory.get(this).decorator(type);
        factoryDecorator && response.push(factoryDecorator);
        return response.reverse();
    }
    function build(definitions, nestedDefinitionCallbackFn) {
        function doBuild(definitions, prefix) {
            Preconditions.optional.checkObject(definitions.properties, 'definitions.properties');
            nestedDefinitionCallbackFn && nestedDefinitionCallbackFn(definitions, prefix);
            var defs = definitions.properties || definitions;
            _.each(defs, function(definition, property) {
                if (!_.isPlainObject(definition)) {
                    return;
                }
                var path = (prefix ? prefix + '.' : '') + property;
                path = ObjectPath.format(ObjectPath.parse(path));
                if (('object' === definition.type || _.isBlank(definition.type)) && _.has(definition, 'definition')) {
                    // Nested Swagger-style definition
                    var defType = _(definition.definition).keys().first();
                    doBuild(_.get(definition, 'definition["' + defType + '"]'), path);
                } else {
                    _.isBlank(definition.type) ? // Nested definition
                    doBuild(definition, path) : templates[path] = self.buildField(path, definition);
                }
            });
        }
        Preconditions.checkObject(definitions, 'definitions');
        Preconditions.optional.checkFunction(nestedDefinitionCallbackFn, 'definitions nested callback');
        var templates = {}, self = this;
        doBuild(definitions);
        return templates;
    }
    function buildField(path, definition) {
        Preconditions.checkString(path, 'path', 1);
        Preconditions.checkObject(definition, 'definition');
        Preconditions.checkString(definition.type, 'definition.type', 1);
        return {
            restricted: !1,
            template: _.bind(function() {
                var type = definition.type, handler = this.type(type);
                if (!handler) {
                    return '<!-- Unregistered type: "' + type + '" -->';
                }
                var tpl = handler.call(this, path, definition);
                Preconditions.optional.checkString(tpl, 'template');
                _.each(this.decorators(type), _.bind(function(decorator) {
                    tpl = decorator.call(this, tpl, path, definition);
                    Preconditions.optional.checkString(tpl, 'template');
                }, this));
                return tpl;
            }, this)
        };
    }
    var DEFAULT_TEMPLATE_KEY = {}, _factory = dw$.hide('TemplateBuilder.factory'), _parent = dw$.hide('TemplateBuilder.parent'), _types = dw$.hide('TemplateBuilder.types'), _decorators = dw$.hide('TemplateBuilder.decorators'), _typesFactory = dw$.hide('TemplateBuilderFactory.types'), _decoratorsFactory = dw$.hide('TemplateBuilderFactory.decorators');
    TemplateBuilderFactory.$new = createFactory;
    TemplateBuilderFactory.prototype.$new = createBuilder;
    TemplateBuilderFactory.prototype.type = registerFactory(_typesFactory);
    TemplateBuilderFactory.prototype.decorator = registerFactory(_decoratorsFactory);
    TemplateBuilder.prototype.$new = create;
    TemplateBuilder.prototype.type = register(_types, 'type');
    TemplateBuilder.prototype.decorator = register(_decorators, 'decorator');
    TemplateBuilder.prototype.decorators = decorators;
    TemplateBuilder.prototype.build = build;
    TemplateBuilder.prototype.buildField = buildField;
    dw$.constant('TemplateBuilderFactory', TemplateBuilderFactory);
    dw$.constant('TemplateBuilder', new TemplateBuilderFactory());
});

dw$.invoke('Preconditions', 'TemplateBuilderFactory', function(Preconditions, TemplateBuilderFactory) {
    function checkScope(scope) {
        Preconditions.checkArgument(_.isScope(scope), 'Not a scope: scope');
    }
    function scopeGetter() {
        return _scope.get(this);
    }
    function decorate(delegate) {
        function doDecorate(instance) {
            instance.$new = decorate(instance.$new);
            instance.scope = scopeGetter;
        }
        return function(scope) {
            checkScope(scope);
            var instance = delegate.call(this);
            _scope.set(instance, scope);
            doDecorate(instance);
            // Unregister scope
            scope.$on('$destroy', function() {
                _scope.set(instance, null);
            });
            return instance;
        };
    }
    function create() {
        var factory = TemplateBuilderFactory.$new();
        factory.$new = decorate(factory.$new);
        return factory;
    }
    function CustomizationTemplateBuilderFactory() {}
    var _scope = dw$.hide('CustomizationTemplateBuilder.scope');
    CustomizationTemplateBuilderFactory.prototype.$new = create;
    dw$.constant('CustomizationTemplateBuilder', new CustomizationTemplateBuilderFactory());
});

dw$.controller('SpacesCtrl', [ 'Workspaces', 'Urls', '$scope', function(Workspaces, Urls, $scope) {
    // Turn on Workspaces service
    Workspaces.on('/');
    $scope.$on('$destroy', function() {
        // Turn off Workspaces service
        Workspaces.off();
    });
    Workspaces.app('welcome', {
        controller: 'WelcomeCtrl',
        template: '<dw:scroller class="oc-welcome"><div class="oc-panel" ng-show="permissions.orderSearch"><dw:button dw-handler="navigateUnique(\'orders\')" dw-label="common.button.orderSearch" class="dw-iconleft dw-glyphicon dw-glyph-archive csc-orderSearch"></dw:button></div><div class="oc-panel" ng-show="permissions.orderCreate"><dw:button dw-handler="navigate(\'orders\', \'create\')" dw-label="common.button.orderCreate" class="dw-iconleft dw-glyphicon dw-glyph-file-o csc-orderCreate"></dw:button></div><div class="oc-panel" ng-show="permissions.orderCreate"><dw:button dw-handler="navigateUnique(\'customers\')" dw-label="common.button.customerSearch" class="dw-iconleft dw-glyphicon dw-glyph-user csc-customerSearch"></dw:button></div></dw:scroller><dw:transclude-content dw-element="header" dw-target=".dw-title"><i class="dw-glyph-tachometer"></i> {{\'common.message.welcome\'|Messages}}</dw:transclude-content>'
    });
    Workspaces.app('unauthorizedApp', {
        controller: angular.noop,
        template: ''
    });
    _.each([ 'unknown', 'empty', 'unauthorized', 'error', 'welcome' ], function(space) {
        Workspaces.space(space, {
            route: {
                '': {
                    browserTitle: 'common.browser.title.welcome',
                    title: 'common.title.welcome',
                    apps: [ 'welcome' ],
                    layout: {
                        type: '1x1'
                    }
                }
            }
        });
    });
} ]);

dw$.invoke('Configuration', '$window', function(Configuration, $window) {
    /**
	 * Wrap a navigation event by first triggering a 'cscNavigation' DOM event
	 * An event handler can call Event.preventDefault() to prevent the wrapped
	 * navigation attempt from being executed
	 * @param {Object} eventDetail the object that should be propogated as CustomEvent.detail
	 * @param {Function} [defaultAction] the original navigation logic that is being wrapped
	 */
    function wrapNavigationEvent(eventDetail, defaultAction) {
        var preventDefault = !1;
        if ('function' == typeof $window.CustomEvent) {
            var event = new $window.CustomEvent('cscNavigation', {
                detail: eventDetail,
                cancelable: !0
            });
            preventDefault = !$window.dispatchEvent(event);
        }
        preventDefault || 'function' != typeof defaultAction || defaultAction();
    }
    function CrossCloudNavigation() {}
    /**
	 * Wrap the 'showBasket' navigation by triggering a DOM event.
	 * An event handler can call Event.preventDefault() to prevent the wrapped
	 * navigation attempt from being executed
	 * @param {Object} basket the basket to be shown
	 * @param {Function} [defaultAction] a function that performs the Workspaces navigation.
	 */
    CrossCloudNavigation.prototype.wrapShowBasket = function(basket, defaultAction) {
        var details = {
            action: 'clickBasket',
            basketId: _.get(basket, 'basket_id'),
            siteId: _.get(Configuration, 'env.site.site_id')
        };
        wrapNavigationEvent(details, defaultAction);
    };
    /**
	 * Wrap the 'showOrder' navigation by triggering a DOM event.
	 * An event handler can call Event.preventDefault() to prevent the wrapped
	 * navigation attempt from being executed
	 * @param {Object} order the order to be shown
	 * @param {Function} [defaultAction] a function that performs the Workspaces navigation.
	 */
    CrossCloudNavigation.prototype.wrapShowOrder = function(order, defaultAction) {
        var details = {
            action: 'clickOrder',
            orderNo: _.get(order, 'order_no'),
            siteId: _.get(Configuration, 'env.site.site_id')
        };
        wrapNavigationEvent(details, defaultAction);
    };
    /**
	 * Wrap the 'orderCreated' navigation by triggering a DOM event.
	 * An event handler can call Event.preventDefault() to prevent the wrapped
	 * navigation attempt from being executed
	 * @param {Object} order the order that was created
	 * @param {Function} [defaultAction] a function that performs the Workspaces navigation.
	 */
    CrossCloudNavigation.prototype.wrapOrderCreated = function(order, defaultAction) {
        var details = {
            action: 'orderCreated',
            orderNo: _.get(order, 'order_no'),
            siteId: _.get(order, 'site_id')
        };
        wrapNavigationEvent(details, defaultAction);
    };
    /**
	 * Wrap the 'basketCreated' navigation (in "Create Order" workflow) by triggering a DOM event.
	 * An event handler can call Event.preventDefault() to prevent the wrapped
	 * navigation attempt from being executed
	 * @param {Object} basket the basket that was created
	 * @param {Function} [defaultAction] a function that performs the Workspaces navigation.
	 */
    CrossCloudNavigation.prototype.wrapBasketCreated = function(basket, defaultAction) {
        var details = {
            action: 'basketCreated',
            basketId: _.get(basket, 'basket_id'),
            customerId: _.get(basket, 'customer_info.customer_id'),
            siteId: _.get(Configuration, 'env.site.site_id')
        };
        wrapNavigationEvent(details, defaultAction);
    };
    /**
	 * Implement the 'changePassword' action by triggering a DOM event.
	 * There is no default CSC action to change password. This will be handled in BM by CSCFrame.
	 */
    CrossCloudNavigation.prototype.showChangePassword = function() {
        if ('function' == typeof $window.CustomEvent) {
            var event = new $window.CustomEvent('showChangePasswordDialog');
            $window.dispatchEvent(event);
        }
    };
    dw$.constant('CrossCloudNavigation', new CrossCloudNavigation());
});

dw$.invoke('Urls', 'Site', 'Configuration', function(Urls, Site, Configuration) {
    function CustomizationUrl() {}
    function obtainsParams(params, condition) {
        condition !== !1 && (params = _.defaults({}, params, {
            locale: Configuration['i18n.locale'],
            display_locale: Configuration['i18n.locale.ui']
        }));
        return Urls.toQueryString(params);
    }
    CustomizationUrl.prototype.area = function(areaId, params) {
        return Urls.resource('CUSTOMIZATION_AREA', {
            site_id: Site,
            area_id: areaId
        }) + obtainsParams(params, 'bootstrap' !== areaId);
    };
    CustomizationUrl.prototype.grid = function(dataTableId, params) {
        return Urls.resource('CUSTOMIZATION_GRID', {
            site_id: Site,
            grid_id: dataTableId
        }) + obtainsParams(params);
    };
    dw$.constant('CustomizationUrl', new CustomizationUrl());
});

dw$.invoke('Preconditions', 'Messages', function(Preconditions, Messages) {
    function decorate(key, args) {
        Preconditions.checkNumber(args.length, 'arguments.length', 1);
        Preconditions.checkString(args[0], 'arguments[0]', 1);
        var params = [ args[0] ];
        args.length > 1 && params.push.apply(params, _.tail(args));
        return Messages.get('common.message.decorator.' + key, Messages.get.apply(Messages, params));
    }
    function bracket() {
        return decorate('bracket', arguments);
    }
    function colon() {
        return decorate('colon', arguments);
    }
    function Decorator() {}
    Decorator.prototype.bracket = bracket;
    Decorator.prototype.colon = colon;
    dw$.constant('Decorator', new Decorator());
});

dw$.filter('cscMask', function() {
    var REGEXP = /./g;
    return function(value) {
        return _.isString(value) ? value.replace(REGEXP, '*') : '';
    };
});

dw$.invoke('Preconditions', function(Preconditions) {
    function Forbidder(nodeStart, nodeEnd, excludeCallback) {
        Preconditions.checkElement(nodeStart, 'start node');
        Preconditions.checkArgument(_.isUndefined(nodeEnd) || _.isElement(nodeEnd) || _.isFunction(nodeEnd), 'No element or function: end node');
        Preconditions.optional.checkFunction(excludeCallback, 'excludeCallback');
        this.nodeStart = nodeStart;
        this.excludeCallback = excludeCallback || _.constant(!0);
        _.isElement(nodeEnd) ? this.nodeEnd = function(el) {
            return el[0] === nodeEnd;
        } : _.isFunction(nodeEnd) ? this.nodeEnd = nodeEnd : this.nodeEnd = _.constant(!1);
    }
    function ForbidderFactory() {}
    function create(nodeStart, nodeEnd, excludeCallback) {
        return new Forbidder(nodeStart, nodeEnd, excludeCallback);
    }
    function toggle(forbidden) {
        var startEl = angular.element(this.nodeStart), hierarchyEls = hierarchy.call(this, startEl), excludeCallback = this.excludeCallback;
        _.forEach(hierarchyEls, function(el) {
            var siblingEls = siblings(el);
            _.forEach(siblingEls, function(siblingEl) {
                if (!forbidden && siblingEl.data('dw$forbidden')) {
                    // Prevent removing the `is-forbidden` class from the field as it's been forbidden initially (before a `toggle(true)` execution)
                    siblingEl.removeData('dw$forbidden');
                    return;
                }
                forbidden && siblingEl.hasClass('is-forbidden') && // Save information about the original state of an eventually available `is-forbidden` class at the element
                siblingEl.data('dw$forbidden', !0);
                excludeCallback(siblingEl, forbidden) && siblingEl.toggleClass('is-forbidden', forbidden);
            });
        });
    }
    function hierarchy(el) {
        for (var hierarchy = []; el[0]; ) {
            hierarchy.push(el);
            if (this.nodeEnd(el)) {
                return hierarchy;
            }
            el = el.parent();
        }
        return hierarchy;
    }
    function siblings(el) {
        return _(el.parent().children()).filter(function(childNode) {
            return childNode !== el[0];
        }).map(angular.element).value();
    }
    Forbidder.prototype.toggle = toggle;
    ForbidderFactory.prototype.$new = create;
    dw$.constant('Forbidder', new ForbidderFactory());
});

dw$.invoke('Preconditions', 'Configuration', 'ObjectUtils', function(Preconditions, Configuration, ObjectUtils) {
    function obtainLocales() {
        var locale = Configuration['i18n.locale'], localeChain = [];
        // Push current locale
        _.isString(locale) && localeChain.push(locale);
        // Push country portion of locale (if applicable) as first fallback
        LOCALE_REGEXP.test(locale) && localeChain.push(locale.substr(0, 2));
        // Push `default` as final fallback
        !_.includes(localeChain, 'default') && localeChain.push('default');
        return localeChain;
    }
    function accessor(obj) {
        Preconditions.optional.checkObject(obj, 'obj');
        if (!obj) {
            return;
        }
        var result = void 0;
        _.every(obtainLocales(), function(locale) {
            if (_.has(obj, locale)) {
                result = obj[locale];
                return !1;
            }
            return !0;
        });
        return result;
    }
    function mutator(obj, value) {
        Preconditions.optional.checkObject(obj, 'obj');
        !obj && (obj = {});
        var locale = _.first(obtainLocales());
        ObjectUtils.set(obj, locale, value);
        return obj;
    }
    function Localized() {}
    var LOCALE_REGEXP = /^[a-z]{2}[_-][A-Z]{2}$/;
    Localized.prototype.locales = obtainLocales;
    Localized.prototype.get = accessor;
    Localized.prototype.set = mutator;
    dw$.constant('Localized', new Localized());
});

dw$.invoke('Preconditions', 'Interactions', function(Preconditions, Interactions) {
    function Masker(element, $scope) {
        Preconditions.checkElement(element, 'element');
        Preconditions.checkArgument(_.isUndefinedOrNull($scope) || _.isScope($scope), 'Not a scope: $scope');
        // Set element
        _element.set(this, element);
        if ($scope) {
            $scope.$on('dw.ui.core.http.requeststart', _.bind(this.mask, this));
            $scope.$on('dw.ui.core.http.requestend', _.bind(this.unmask, this));
        }
    }
    function mask($timeout, event, eventData) {
        // Bypass `GET` requests
        if (bypassFn(eventData)) {
            return;
        }
        // Cancel existing unmask timeout
        var unmaskTimeout = _unmaskTimeout.get(this);
        unmaskTimeout && $timeout.cancel(unmaskTimeout);
        // Stop event propagation
        event && _.isFunction(event.stopPropagation) && event.stopPropagation();
        // Create mask if required
        var loadingMask = _mask.get(this);
        if (loadingMask) {
            return;
        }
        // Create mask
        loadingMask = Interactions.mask({
            defaults: {
                target: _element.get(this),
                message: 'common.message.loading',
                type: 'instant'
            }
        });
        // Set mask
        _mask.set(this, loadingMask);
        // Show mask
        loadingMask();
    }
    function unmask($timeout, event, eventData) {
        // Bypass `GET` requests
        if (bypassFn(eventData)) {
            return;
        }
        // Cancel existing unmask timeout
        var unmaskTimeout = _unmaskTimeout.get(this);
        unmaskTimeout && $timeout.cancel(unmaskTimeout);
        // Stop event propagation
        event && _.isFunction(event.stopPropagation) && event.stopPropagation();
        // Trigger close mask
        unmaskTimeout = $timeout(_.bind(function() {
            // Close mask
            var loadingMask = _mask.get(this);
            loadingMask && loadingMask.cancel();
            // Unset mask
            _mask.set(this, null);
        }, this), 250, !1);
        _unmaskTimeout.set(this, unmaskTimeout);
    }
    function MaskerFactory() {}
    function create(element, $scope) {
        return new Masker(element, $scope);
    }
    var _element = dw$.hide('Masker.element'), _mask = dw$.hide('Masker.mask'), _unmaskTimeout = dw$.hide('Masker.unmaskTimeout'), bypassFn = dw$.inject('$parse', function($parse, eventData) {
        return 'GET' === $parse('config.method')(eventData);
    });
    Masker.prototype.mask = dw$.inject('$timeout', mask);
    Masker.prototype.unmask = dw$.inject('$timeout', unmask);
    MaskerFactory.prototype.create = create;
    dw$.constant('Masker', new MaskerFactory());
});

dw$.invoke('Configuration', 'ObjectUtils', function(Configuration, ObjectUtils) {
    function correctLocaleId(locale) {
        return _.isNotBlank(locale) ? locale.replace(/_/g, '-') : null;
    }
    function obtainLocaleInfo(data) {
        var siteData = _.get(data, 'site') || {}, userData = _.get(data, 'user') || {};
        // Configure available locales
        Configuration['i18n.locales'] = siteData.allowed_locales = _.map(siteData.locales, function(locale) {
            var localeId = correctLocaleId(locale.id);
            locale["default"] && (siteData.default_locale = localeId);
            return localeId;
        });
        // Configure data locale
        Configuration['i18n.locale'] = correctLocaleId(userData.preferred_locale_data);
        // Configure UI locale
        Configuration['i18n.locale.ui'] = correctLocaleId(userData.preferred_locale_ui);
        return data;
    }
    var env = Configuration.env = {};
    dw$.service('RoutesInit', [ 'CustomizationUrl', '$http', function(CustomizationUrl, $http) {
        this.init = function() {
            var bootstrapUrl = CustomizationUrl.area('bootstrap');
            return $http.get(bootstrapUrl, {
                responseType: 'json'
            }).then(function(response) {
                var data = _.get(response, 'data') || {};
                ObjectUtils.merge(env, obtainLocaleInfo(data));
                return data;
            });
        };
    } ]);
});

dw$.invoke('Configuration', function(Configuration) {
    function get(preference) {
        return _.get(Configuration.env, 'site.preferences[' + preference + ']');
    }
    function has(preference) {
        return get(preference) === !0;
    }
    function setPageSize(grid, items) {
        var pageSize = items && items.length > 0 ? items.length : GRID_CONFIG_DEFAULT_PAGE_SIZE;
        grid.setPageSize(pageSize);
        grid.load();
    }
    function SitePreferences() {}
    var GRID_CONFIG_DEFAULT_PAGE_SIZE = 200;
    SitePreferences.prototype.get = get;
    SitePreferences.prototype.has = has;
    SitePreferences.prototype.multiShipment = function() {
        return has('multi_shipment');
    };
    SitePreferences.prototype.imageViewTypesProductItem = function() {
        return get('image_view_types_product_item');
    };
    SitePreferences.prototype.gridConfig = {
        setPageSize: setPageSize
    };
    dw$.constant('SitePreferences', new SitePreferences());
});

dw$.invoke('Preconditions', 'ObjectUtils', function(Preconditions, ObjectUtils) {
    function Swagger2ConditionWatcher(scope, basePath) {
        Preconditions.checkArgument(_.isScope(scope), 'Not a scope: scope');
        Preconditions.checkString(basePath, 'base path', 1);
        _scope.set(this, scope);
        _basePath.set(this, basePath);
        _deregFns.set(this, []);
        // Unregister scope
        scope.$on('$destroy', _.bind(function() {
            this.reset();
            _scope.set(this, null);
        }, this));
    }
    function deregister() {
        var deregFns = _deregFns.get(this);
        _.each(deregFns, function(deregFn) {
            deregFn();
        });
        _deregFns.set(this, []);
        return this;
    }
    function watch($parse, definitionsArr, callback) {
        Preconditions.checkArray(definitionsArr, 'definitions array');
        Preconditions.checkFunction(callback, 'callback');
        var scope = _scope.get(this), deregFns = _deregFns.get(this), defaultDefinitions = null, wrappedCallback = dw$.inject('$timeout', function($timeout, match) {
            callback.call(this, match);
            // Important: We need to send a "dw.ui.core.invalidate" event to support display of contents inside popovers
            $timeout(function() {
                scope.$emit('dw.ui.core.invalidate');
            }, 0, !1);
        }), conditionWatchers = _.transform(definitionsArr, function(result, definitions) {
            Preconditions.checkObject(definitions, 'definitions');
            Preconditions.optional.checkObject(definitions.properties, 'definitions.properties');
            Preconditions.optional.checkArray(definitions.required, 'definitions.required');
            Preconditions.optional.checkArray(definitions.conditions, 'definitions.conditions');
            var cond = definitions.conditions;
            if (_.isArray(cond) && !_.isEmpty(cond)) {
                var expression = '(' + cond.join(') && (') + ')', conditionWatcher = function() {
                    return $parse(expression)(scope);
                };
                conditionWatcher.definition = function() {
                    return _.cloneDeep(definitions);
                };
                result.push(conditionWatcher);
            } else {
                defaultDefinitions = _.cloneDeep(definitions);
            }
        }, []);
        _.isEmpty(conditionWatchers) ? defaultDefinitions && wrappedCallback(defaultDefinitions) : deregFns.push(scope.$watchGroup(conditionWatchers, function(results) {
            var match = _.transform(results, function(container, result, idx) {
                if (result !== !1 && !_.isUndefinedOrNull(result)) {
                    var definition = conditionWatchers[idx].definition(), required = definition.required;
                    definition = _.omit(definition, 'conditions', 'required');
                    // Merge `required`
                    if (required) {
                        !container.required && ObjectUtils.set(container, 'required', []);
                        Array.prototype.push.apply(container.required, required);
                    }
                    // Merge everything except `required`
                    ObjectUtils.defaultsDeep(container, definition);
                }
            }, {});
            // Important: Needs to be deferred to prevent issues with currently removed/unbound form fields from former condition match. - Steffen
            scope.$evalAsync(function() {
                _.has(match, 'properties') ? wrappedCallback(match) : defaultDefinitions && wrappedCallback(defaultDefinitions);
            });
        }));
        return this;
    }
    function Swagger2ConditionWatcherFactory() {}
    var _scope = dw$.hide('Swagger2ConditionWatcher.scope'), _basePath = dw$.hide('Swagger2ConditionWatcher.basePath'), _deregFns = dw$.hide('Swagger2ConditionWatcher.deregFns');
    Swagger2ConditionWatcher.prototype.watch = dw$.inject('$parse', watch);
    Swagger2ConditionWatcher.prototype.reset = deregister;
    Swagger2ConditionWatcherFactory.prototype.$new = function(scope, basePath) {
        return new Swagger2ConditionWatcher(scope, basePath);
    };
    dw$.constant('Swagger2ConditionWatcher', new Swagger2ConditionWatcherFactory());
});

dw$.invoke('Preconditions', 'Formats', 'ObjectPath', 'CustomizationTemplateBuilder', 'Localized', 'Messages', 'Decorator', function(Preconditions, Formats, ObjectPath, CustomizationTemplateBuilder, Localized, Messages, Decorator) {
    function obtainPropertyGetter(propertyGetter) {
        Preconditions.optional.checkFunction(propertyGetter, 'property getter');
        propertyGetter = propertyGetter || _.identity;
        return function(path, definition) {
            path = propertyGetter(path, definition);
            return ObjectPath.format(ObjectPath.parse(path));
        };
    }
    function mapEnums(definition) {
        var defEnum = definition["enum"], labels = definition['x-enum-labels'];
        if (!_.isArray(labels) || _.isEmpty(labels) || _.size(labels) !== _.size(defEnum)) {
            return {};
        }
        return _.transform(labels, function(result, value, idx) {
            result[defEnum[idx]] = value;
        }, {});
    }
    function obtainDefaultDecorator(output, path) {
        var fieldName = path.replace(/[.-]/g, '_');
        return '<span class="oc-display-field oc-display-field-' + fieldName + '">' + output + '</span>';
    }
    function obtainLabel(fieldName) {
        if (!_showLabels.get(this)) {
            return '';
        }
        var containerArray = _scopeContainer.get(this);
        return '<span class="dw-label">{{' + containerArray[0] + '.labels[\'' + fieldName + '\']()}}</span>';
    }
    function obtainDefaultTemplate(property) {
        return '{{' + property + '}}';
    }
    function obtainStringTemplate(property, definition, config) {
        if (definition["enum"]) {
            return obtainFormatValueTemplate(property, definition, config);
        }
        switch (definition.format) {
          case 'html':
            return '<span ng-bind-html="' + config.containerId + '.html(' + property + ') | SafeHtml"></span>';

          case 'text':
            return '<span style="white-space: pre" ng-bind="' + property + '"></span>';

          case 'date':
            return '{{' + config.containerId + '.date("date")(' + property + ')}}';

          case 'date-time':
            return '{{' + config.containerId + '.date("datetime")(' + property + ')}}';

          case 'password':
            return '{{' + property + ' | cscMask}}';

          default:
            return '{{' + property + '}}';
        }
    }
    function obtainNumberTemplate(format) {
        return function(property, definition, config) {
            if (definition["enum"]) {
                return obtainFormatValueTemplate(property, definition, config);
            }
            if (_.isNull(definition.format)) {
                return '{{' + property + '}}';
            }
            return '{{' + property + ' | Formats:"' + format + '"}}';
        };
    }
    function obtainBooleanTemplate(property, definition, config) {
        if (definition["enum"]) {
            return obtainFormatValueTemplate(property, definition, config);
        }
        return '<i ng-show="' + property + ' === true || ' + property + ' === false" ng-class="{\'dw-glyph-check\': ' + property + ' === true, \'dw-glyph-ban\': ' + property + ' === false}" role="img"></i>';
    }
    function obtainFormatValueTemplate(property, definition, config) {
        var fieldName = config.fieldName;
        config.container.formatted[fieldName] = function(value) {
            return formatValue(definition, config, value);
        };
        return '<span ng-bind-html="' + config.containerId + '.formatted[\'' + fieldName + '\'](' + property + ') | SafeHtml"></span>';
    }
    function obtainLocalizedTemplate(property, definition, config) {
        var fieldName = config.fieldName;
        config.container.localized[fieldName] = function(value) {
            value = _.isPlainObject(value) ? Localized.get(value) : value;
            return formatValue(definition, config, value);
        };
        return '<span ng-bind-html="' + config.containerId + '.localized[\'' + fieldName + '\'](' + property + ') | SafeHtml"></span>';
    }
    function obtainObjectTemplate(property, definition, config) {
        var defAdditional = definition.additionalProperties;
        if (defAdditional) {
            return obtainLocalizedTemplate(property, defAdditional, config);
        }
    }
    function formatValue(definition, config, value) {
        function formatNumber(format) {
            return dw$.safe(format(value));
        }
        var type = _.get(definition, 'type');
        if ('object' === type) {
            // Not supported
            return Messages.getSafeHtml('common.message.placeholder.unsupported', definition.type);
        }
        if ('array' === type || _.isArray(value)) {
            // Handle/format array values
            var nestedDefinition = _.get(definition, 'items') || definition, formatted = Formats.get('array')(_.transform(value, function(result, v) {
                var vFormatted = formatValue(nestedDefinition, config, v);
                return vFormatted && result.push(vFormatted);
            }, []));
            return formatHtml(formatted);
        }
        if (definition["enum"]) {
            var enumMap = mapEnums(definition);
            if (_.has(enumMap, value)) {
                value = enumMap[value];
                return _.isPlainObject(value) ? dw$.safe(Localized.get(value)) : dw$.safe(value);
            }
        }
        var html;
        switch (type) {
          case 'integer':
            return formatNumber(_.isNull(definition.format) ? _plainIntegerFormat : Formats.get('integer'));

          case 'number':
            return formatNumber(_.isNull(definition.format) ? _plainNumberFormat : Formats.get('decimal'));

          case 'boolean':
            return formatHtml(formatBoolean(value));

          default:
            html = formatString(definition, config, value);
            return html ? dw$.safe(html) : null;
        }
    }
    function formatString(definition, config, value) {
        var container = config.container;
        switch (_.get(definition, 'format')) {
          case 'html':
            return formatHtml(value);

          case 'text':
            return value ? formatHtml('<span style="white-space: pre">' + value + '</span>') : value;

          case 'date':
            return container.date('date')(value);

          case 'date-time':
            return container.date('datetime')(value);

          case 'password':
            return dw$.invoke('$filter', function($filter) {
                return $filter('cscMask')(value);
            });

          default:
            return value;
        }
    }
    function formatBoolean(value) {
        if (value === !0) {
            return '<span class="dw-glyph-check"></span>';
        }
        if (value === !1) {
            return '<span class="dw-glyph-ban"></span>';
        }
        return '';
    }
    function formatLabel(path, definition) {
        var label = definition['x-label'];
        if (_.isPlainObject(label)) {
            return Decorator.colon(Localized.get(label));
        }
        return Decorator.colon(label || path);
    }
    function formatHtml(html) {
        return html ? dw$.safe('').concatSafeHTML(html) : null;
    }
    function wrap(fn) {
        return function(path, definition) {
            var propertyGetter = _propertyGetter.get(this), containerArray = _scopeContainer.get(this), container = containerArray[1], property = propertyGetter(path, definition), fieldName = path.replace(/[.-]/g, '_'), config = {
                fieldName: fieldName,
                containerId: containerArray[0],
                container: container
            };
            // Preserve label
            container.labels[fieldName] = function() {
                return formatLabel(path, definition);
            };
            return obtainLabel.call(this, fieldName) + fn.call(this, property, definition, config);
        };
    }
    function create($scope, propertyGetter, showLabels) {
        function initContainer() {
            // Init containers in `$scope[containerId]`
            container.labels = {};
            container.formatted = {};
            container.localized = {};
            container.date = function(format) {
                return function(value) {
                    _.isString(value) && (value = Formats.get('iso8601').parse(value));
                    return Formats.get(format)(value);
                };
            };
            container.html = formatHtml;
        }
        var factory = _factory.get(this), instance = factory.$new($scope), containerId = _.uniqueId('dwx$swagger2displaybuilder'), container = $scope[containerId] = {};
        _propertyGetter.set(instance, obtainPropertyGetter(propertyGetter));
        _scopeContainer.set(instance, [ containerId, container ]);
        _showLabels.set(instance, showLabels === !0);
        initContainer();
        // Set `build()` delegate in order to manage scope container reset
        var buildDelegate = instance.build;
        instance.build = function() {
            initContainer();
            return buildDelegate.apply(this, _.toArray(arguments));
        };
        return instance;
    }
    function Swagger2DisplayBuilderFactory() {
        var factory = CustomizationTemplateBuilder.$new();
        factory.decorator(obtainDefaultDecorator);
        factory.type(wrap(obtainDefaultTemplate));
        factory.type('string', wrap(obtainStringTemplate));
        factory.type('integer', wrap(obtainNumberTemplate('integer')));
        factory.type('number', wrap(obtainNumberTemplate('decimal')));
        factory.type('boolean', wrap(obtainBooleanTemplate));
        factory.type('array', wrap(obtainFormatValueTemplate));
        factory.type('object', wrap(obtainObjectTemplate));
        _factory.set(this, factory);
    }
    var _factory = dw$.hide('Swagger2DisplayBuilderFactory.factory'), _propertyGetter = dw$.hide('Swagger2DisplayBuilder.propertyGetter'), _scopeContainer = dw$.hide('Swagger2DisplayBuilder.scopeContainer'), _showLabels = dw$.hide('Swagger2DisplayBuilder.showLabels'), _plainIntegerFormat = Formats.number('#'), _plainNumberFormat = function(value) {
        return _.isNaN(value) || _.isUndefinedOrNull(value) ? '' : value.toString();
    };
    Swagger2DisplayBuilderFactory.prototype.$new = create;
    dw$.constant('Swagger2DisplayBuilder', new Swagger2DisplayBuilderFactory());
});

dw$.invoke('Preconditions', 'Messages', 'Formats', 'ObjectPath', 'CustomizationTemplateBuilder', 'Localized', function(Preconditions, Messages, Formats, ObjectPath, CustomizationTemplateBuilder, Localized) {
    function obtainPropertyGetter(propertyGetter) {
        Preconditions.optional.checkFunction(propertyGetter, 'property getter');
        propertyGetter = propertyGetter || _.identity;
        return function(path, definition) {
            path = propertyGetter(path, definition);
            return ObjectPath.format(ObjectPath.parse(path));
        };
    }
    function mapEnums(definition) {
        var defEnum = definition["enum"], labels = definition['x-enum-labels'];
        if (!_.isArray(labels) || _.isEmpty(labels) || _.size(labels) !== _.size(defEnum)) {
            return {};
        }
        return _.transform(labels, function(result, value, idx) {
            result[defEnum[idx]] = value;
        }, {});
    }
    function obtainDefaultDecorator(output, path, definition) {
        var fieldName = path.replace(/[.-]/g, '_');
        return '<span class="csc-form-field csc-form-field-' + definition.type + ' csc-form-field-' + fieldName + '">' + output + '</span>';
    }
    function obtainLabel(fieldName) {
        var formName = _formName.get(this), containerArray = _scopeContainer.get(this), containerId = containerArray[0], formFieldName = formName + '.' + fieldName;
        return "<dw:input-label name=\"" + fieldName + '" dw-label-function="' + containerId + '.labels[\'' + fieldName + '\']" dw-tooltip-enabled="' + formFieldName + '.$invalid" ng-class="{\'dw-required\': ' + containerId + '.required[\'' + fieldName + "']}\">  <div>    <dw:valid-indicator name=\"" + formFieldName + "\"></dw:valid-indicator>  </div></dw:input-label>";
    }
    function obtainDefaultTemplate(property, definition, config) {
        var fieldName = config.fieldName;
        config.container.placeholders[fieldName] = Messages.get('common.message.placeholder.unsupported', definition.type);
        return '<dw:text-field name="' + fieldName + '" dw-model="' + property + '" dw-placeholder-text="' + config.containerId + '.placeholders[\'' + fieldName + '\']"' + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:text-field>';
    }
    function obtainStringTemplate(property, definition, config, formatter) {
        if (definition["enum"] && !_.includes([ 'date', 'date-time' ], definition.format)) {
            return obtainEnumTemplate.call(this, property, definition, config);
        }
        var fieldName = config.fieldName, containerId = config.containerId;
        definition["enum"] && (config.container.dateDisabled[fieldName] = function(value) {
            return !_.find(definition["enum"], function(validValue) {
                return _.isEqual(value, validValue);
            });
        });
        switch (definition.format) {
          case 'date':
            return '<dw:date-field name="' + config.fieldName + '" dw-model="' + property + '" ' + (formatter ? 'dw-format-function="' + formatter + '"' : 'dw-format="date"') + (definition.disabled ? ' dw-enabled="false"' : '') + (definition["enum"] ? ' dw-picker-date-disabled="' + containerId + '.dateDisabled[\'' + fieldName + '\']"' : '') + '></dw:date-field>';

          case 'date-time':
            return '<dw:date-field name="' + config.fieldName + '" dw-model="' + property + '" ' + (formatter ? 'dw-format-function="' + formatter + '"' : 'dw-format="datetime"') + (definition.disabled ? ' dw-enabled="false"' : '') + (definition["enum"] ? ' dw-picker-date-disabled="' + containerId + '.dateDisabled[\'' + fieldName + '\']"' : '') + '></dw:date-field>';

          case 'password':
            return '<dw:text-field name="' + config.fieldName + '" dw-model="' + property + '"' + (formatter ? 'dw-format-function="' + formatter + '"' : '') + (definition.disabled ? ' dw-enabled="false"' : '') + ' dw-type="password"></dw:text-field>';

          case 'html':
          case 'text':
            return '<dw:text-area name="' + config.fieldName + '" dw-model="' + property + '"' + (formatter ? 'dw-format-function="' + formatter + '"' : '') + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:text-area>';

          default:
            return '<dw:text-field name="' + config.fieldName + '" dw-model="' + property + '"' + (formatter ? 'dw-format-function="' + formatter + '"' : '') + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:text-field>';
        }
    }
    function obtainBooleanTemplate(property, definition, config) {
        if (definition["enum"]) {
            return obtainEnumTemplate.call(this, property, definition, config);
        }
        var uid = _.uniqueId('dwx$swagger2formbuilder'), containerId = config.containerId, fieldName = config.fieldName;
        return '<input class="dw-checkbox" type="checkbox" id="' + uid + '" name="' + fieldName + '" ng-model="' + property + '" ' + (definition.disabled ? ' disabled="disabled"' : '') + '/><label for="' + uid + '">{{' + containerId + '.labels[\'' + fieldName + '\']()}}<abbr class="dw-required" ng-show="' + containerId + '.required[\'' + fieldName + '\']">*</abbr></label>';
    }
    function obtainFormatter(definition, config) {
        var fieldName = config.fieldName, formatters = config.container.formatters;
        formatters[fieldName] = function(value) {
            return formatValue(definition, config, value);
        };
        formatters[fieldName].parse = function(value) {
            return parseValue(definition, config, value);
        };
        return config.containerId + '.formatters[\'' + fieldName + '\']';
    }
    function obtainIntegerTemplate(property, definition, config, formatter) {
        if (definition["enum"]) {
            return obtainEnumTemplate.call(this, property, definition, config);
        }
        !formatter && _.isNull(definition.format) && (// Format explicitly set to `null` => Don't use default format for the output
        formatter = obtainFormatter(definition, config));
        return '<dw:text-field name="' + config.fieldName + '" dw-model="' + property + '" ' + (formatter ? 'dw-format-function="' + formatter + '"' : 'dw-format="integer"') + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:text-field><dw:spinner name="' + config.fieldName + '" dw-model="' + property + '"' + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:spinner>';
    }
    function obtainNumberTemplate(property, definition, config, formatter) {
        if (definition["enum"]) {
            return obtainEnumTemplate.call(this, property, definition, config);
        }
        !formatter && _.isNull(definition.format) && (// Format explicitly set to `null` => Don't use default format for the output
        formatter = obtainFormatter(definition, config));
        return '<dw:text-field name="' + config.fieldName + '" dw-model="' + property + '" ' + (formatter ? 'dw-format-function="' + formatter + '"' : 'dw-format="decimal"') + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:text-field>';
    }
    function obtainEnumTemplate(property, definition, config) {
        var map = mapEnums(definition), fieldName = config.fieldName, containerId = config.containerId;
        config.container.enums[fieldName] = _.map(definition["enum"], function(value) {
            return {
                label: function() {
                    if (_.has(map, value)) {
                        var label = map[value];
                        return _.isPlainObject(label) ? Localized.get(label) : label;
                    }
                    return formatValue(definition, config, value);
                },
                value: value
            };
        });
        return "<div class=\"dw-select-wrapper\">  <select class=\"dw-input\" name=\"" + fieldName + '" ng-model="' + property + '" ng-options="item.value as item.label() for item in ' + containerId + '.enums[\'' + fieldName + '\']"' + (definition.multiple ? ' multiple="multiple"' : '') + ' ng-required="' + containerId + '.required[\'' + fieldName + '\']"' + (definition.disabled ? ' disabled="disabled"' : '') + ">    <option value=\"\" ng-hide=\"" + containerId + '.required[\'' + fieldName + "']\">{{'common.message.placeholder.select' | Messages}}</option>  </select></div>";
    }
    function obtainArrayTemplate(property, definition, config) {
        var itemDefinition = _.get(definition, 'items');
        if ('object' === itemDefinition.type) {
            return obtainDefaultTemplate.call(this, property, itemDefinition, config);
        }
        if (itemDefinition["enum"]) {
            itemDefinition = _.assign({}, itemDefinition, {
                multiple: !0
            });
            return obtainEnumTemplate.call(this, property, itemDefinition, config);
        }
        var fieldName = config.fieldName, formatters = config.container.arrays;
        formatters[fieldName] = function(value) {
            return formatValue(itemDefinition, config, value);
        };
        formatters[fieldName].parse = function(value) {
            return parseValue(itemDefinition, config, value);
        };
        return '<dw:collection-field name="' + config.fieldName + '" dw-model="' + property + '" dw-format-function="' + config.containerId + '.arrays[\'' + fieldName + '\']" dw-label="common.button.add"' + (definition.disabled ? ' dw-enabled="false"' : '') + '></dw:collection-field>';
    }
    function obtainLocalizedTemplate(property, definition, config) {
        var scope = this.scope(), defAdditional = definition.additionalProperties, fieldName = config.fieldName, formatters = config.container.localized, formatter = config.containerId + '.localized[\'' + fieldName + '\']';
        formatters[fieldName] = function(value) {
            value = _.isPlainObject(value) ? Localized.get(value) : value;
            return formatValue(defAdditional, config, value);
        };
        formatters[fieldName].parse = function(value) {
            var container = _.get(scope, property);
            return Localized.set(container, parseValue(defAdditional, config, value));
        };
        switch (defAdditional.type) {
          case 'string':
            return obtainStringTemplate.call(this, property, defAdditional, config, formatter);

          case 'integer':
            return obtainIntegerTemplate.call(this, property, defAdditional, config, formatter);

          case 'number':
            return obtainNumberTemplate.call(this, property, defAdditional, config, formatter);

          case 'array':
            return obtainArrayTemplate.call(this, property, defAdditional, config, formatter);

          default:
            return obtainDefaultTemplate.call(this, property, defAdditional, config);
        }
    }
    function obtainObjectTemplate(property, definition, config) {
        if (definition.additionalProperties) {
            return obtainLocalizedTemplate.call(this, property, definition, config);
        }
        return obtainDefaultTemplate.call(this, property, definition, config);
    }
    function formatValue(definition, config, value) {
        function formatNumber(format) {
            _.isString(value) && (value = format.parse(value));
            return format(value);
        }
        var type = _.get(definition, 'type');
        if ('array' === type || _.isArray(value)) {
            // Handle/format array values
            var subDef = _.get(definition, 'items') || definition;
            return Formats.get('array')(_.map(value, function(v) {
                return formatValue(subDef, config, v);
            }));
        }
        switch (type) {
          case 'integer':
            return formatNumber(_.isNull(definition.format) ? _plainIntegerFormat : Formats.get('integer'));

          case 'number':
            return formatNumber(_.isNull(definition.format) ? _plainNumberFormat : Formats.get('decimal'));

          default:
            return formatString(definition, config, value);
        }
    }
    function formatString(definition, config, value) {
        var container = config.container;
        switch (_.get(definition, 'format')) {
          case 'date':
            return container.date('date')(value);

          case 'date-time':
            return container.date('datetime')(value);

          case 'password':
            return dw$.invoke('$filter', function($filter) {
                return $filter('cscMask')(value);
            });

          default:
            return String(value);
        }
    }
    function parseValue(definition, config, value) {
        function parseNumber(format) {
            return format.parse(value);
        }
        switch (_.get(definition, 'type')) {
          case 'integer':
            return parseNumber(_.isNull(definition.format) ? _plainIntegerFormat : Formats.get('integer'));

          case 'number':
            return parseNumber(_.isNull(definition.format) ? _plainNumberFormat : Formats.get('decimal'));

          default:
            return parseString(definition, config, value);
        }
    }
    function parseString(definition, config, value) {
        switch (_.get(definition, 'format')) {
          case 'date':
            return Formats.get('date').parse(value);

          case 'date-time':
            return Formats.get('datetime').parse(value);

          default:
            return value ? value.toString() : value;
        }
    }
    function formatLabel(path, definition) {
        var label = definition['x-label'];
        if (_.isPlainObject(label)) {
            return Localized.get(label);
        }
        return label || path;
    }
    function wrap(fn) {
        return function(path, definition) {
            var propertyGetter = _propertyGetter.get(this), containerArray = _scopeContainer.get(this), container = containerArray[1], property = propertyGetter(path, definition), fieldName = path.replace(/[.-]/g, '_'), config = {
                fieldName: fieldName,
                containerId: containerArray[0],
                container: container
            };
            // Preserve label
            container.labels[fieldName] = function() {
                return formatLabel(path, definition);
            };
            var result = fn.call(this, property, definition, config);
            if ('boolean' === definition.type && !definition["enum"]) {
                return result;
            }
            return obtainLabel.call(this, fieldName) + result;
        };
    }
    function create($scope, formName, propertyGetter) {
        function initContainer() {
            // Init containers in `$scope[containerId]`
            container.required = {};
            container.placeholders = {};
            container.labels = {};
            container.enums = {};
            container.arrays = {};
            container.formatters = {};
            container.localized = {};
            container.date = function(format) {
                return function(value) {
                    _.isString(value) && (value = Formats.get('iso8601').parse(value));
                    return Formats.get(format)(value);
                };
            };
            container.dateDisabled = {};
        }
        Preconditions.checkString(formName, 'form name', 1);
        var factory = _factory.get(this), instance = factory.$new($scope), containerId = _.uniqueId('dwx$swagger2formbuilder'), container = $scope[containerId] = {};
        _formName.set(instance, formName);
        _scopeContainer.set(instance, [ containerId, container ]);
        _propertyGetter.set(instance, obtainPropertyGetter(propertyGetter));
        initContainer();
        // Set `build()` delegate in order to manage `required` field handling and scope container reset
        var buildDelegate = instance.build;
        instance.build = function(definitions) {
            Preconditions.checkObject(definitions, 'definitions');
            var required = definitions.required;
            Preconditions.optional.checkArray(required, 'definitions.required');
            initContainer();
            return buildDelegate.call(this, definitions, function(defs, prefix) {
                // Handle `required` settings
                defs.required && _.transform(defs.required, function(result, property) {
                    var path = (prefix ? prefix + '.' : '') + property, field = ObjectPath.format(ObjectPath.parse(path)).replace(/[.-]/g, '_');
                    result[field] = !0;
                }, container.required);
            });
        };
        return instance;
    }
    function Swagger2FormBuilderFactory() {
        var factory = CustomizationTemplateBuilder.$new();
        factory.decorator(obtainDefaultDecorator);
        factory.type(wrap(obtainDefaultTemplate));
        factory.type('string', wrap(obtainStringTemplate));
        factory.type('integer', wrap(obtainIntegerTemplate));
        factory.type('number', wrap(obtainNumberTemplate));
        factory.type('boolean', wrap(obtainBooleanTemplate));
        factory.type('array', wrap(obtainArrayTemplate));
        factory.type('object', wrap(obtainObjectTemplate));
        _factory.set(this, factory);
    }
    var _factory = dw$.hide('Swagger2FormBuilderFactory.factory'), _formName = dw$.hide('Swagger2FormBuilder.formName'), _propertyGetter = dw$.hide('Swagger2FormBuilder.propertyGetter'), _scopeContainer = dw$.hide('Swagger2FormBuilder.scopeContainer'), _plainIntegerFormat = Formats.number('#'), _plainNumberFormat = function(value) {
        return _.isNaN(value) || _.isUndefinedOrNull(value) ? '' : value.toString();
    };
    _plainNumberFormat.parse = parseFloat;
    Swagger2FormBuilderFactory.prototype.$new = create;
    dw$.constant('Swagger2FormBuilder', new Swagger2FormBuilderFactory());
});

dw$.invoke('Preconditions', 'Formats', 'ObjectPath', 'ObjectUtils', function(Preconditions, Formats, ObjectPath, ObjectUtils) {
    function Swagger2PostDataPreparer() {}
    var DATE_FORMAT = Formats.date('Y-m-d'), DATETIME_FORMAT = Formats.get('iso8601');
    Swagger2PostDataPreparer.prototype.prepare = function(widgetDefinitions, data) {
        function doPrepare(definitions, prefix) {
            Preconditions.checkObject(definitions.properties, 'definitions.properties');
            // Identify properties that aren't part of the current definition, yet have been set to `null`
            var validKeys = _.keys(definitions.properties), parentData = prefix ? _.get(data, prefix) : data, dataKeys = _.keys(parentData), diffKeys = _.difference(dataKeys, validKeys);
            // Set `null` values to `undefined` in order to prevent possible issues on POST
            _.forEach(diffKeys, function(diffKey) {
                _.isNull(_.get(parentData, diffKey)) && ObjectUtils.set(parentData, diffKey);
            });
            _.each(definitions.properties, function(definition, property) {
                if (!_.isPlainObject(definition)) {
                    return;
                }
                var path = (prefix ? prefix + '.' : '') + property;
                path = ObjectPath.format(ObjectPath.parse(path));
                if (('object' === definition.type || _.isBlank(definition.type)) && _.has(definition, 'definition')) {
                    // Nested definition
                    var defType = _(definition.definition).keys().first(), nestedDefinitions = _.get(definition, 'definition["' + defType + '"]');
                    Preconditions.optional.checkObject(nestedDefinitions, 'nested definitions');
                    nestedDefinitions && doPrepare(nestedDefinitions, path);
                } else {
                    if ('string' === definition.type && _.includes([ 'date', 'date-time' ], definition.format)) {
                        // Transform date values into ISO 8601 strings
                        var value = _.get(data, path);
                        if (_.isDate(value)) {
                            var format = 'date' === definition.format ? DATE_FORMAT : DATETIME_FORMAT;
                            ObjectUtils.set(data, path, format(value));
                        }
                    }
                }
            });
        }
        Preconditions.checkObject(widgetDefinitions, 'widget definitions');
        Preconditions.optional.checkObject(data, 'data');
        // Clone data
        data = _.cloneDeep(data);
        // Run through every widget definition and prepare `data` based on its `meta` definition
        _.each(widgetDefinitions, function(widgetDefinition) {
            var definitions = _.get(widgetDefinition, 'meta');
            Preconditions.optional.checkObject(definitions, 'definitions');
            definitions && doPrepare(definitions);
        });
        return data;
    };
    dw$.constant('Swagger2PostDataPreparer', new Swagger2PostDataPreparer());
});

dw$.invoke('Preconditions', 'Formats', 'ObjectPath', 'ObjectUtils', function(Preconditions, Formats, ObjectPath, ObjectUtils) {
    function Swagger2ScopeInitializer(scope, basePath) {
        Preconditions.checkArgument(_.isScope(scope), 'Not a scope: scope');
        Preconditions.checkString(basePath, 'base path', 1);
        _scope.set(this, scope);
        _basePath.set(this, basePath);
        _deregFns.set(this, []);
        // Unregister scope
        scope.$on('$destroy', _.bind(function() {
            this.reset();
            _scope.set(this, null);
        }, this));
    }
    function deregister() {
        var deregFns = _deregFns.get(this);
        _.each(deregFns, function(deregFn) {
            deregFn();
        });
        _deregFns.set(this, []);
        return this;
    }
    function initializeAll(definitions) {
        function doInitialize(definitions, prefix) {
            Preconditions.checkObject(definitions.properties, 'definitions.properties');
            _.each(definitions.properties, function(definition, property) {
                if (!_.isPlainObject(definition)) {
                    return;
                }
                var path = (prefix ? prefix + '.' : '') + property;
                path = ObjectPath.format(ObjectPath.parse(path));
                if (('object' === definition.type || _.isBlank(definition.type)) && _.has(definition, 'definition')) {
                    // Nested definition
                    var defType = _(definition.definition).keys().first(), nestedDefinitions = _.get(definition, 'definition["' + defType + '"]');
                    Preconditions.optional.checkObject(nestedDefinitions, 'nested definitions');
                    nestedDefinitions && doInitialize(nestedDefinitions, path);
                } else {
                    definition.type && initializeField(definition, path);
                }
            });
        }
        function initializeField(definition, propertyPath) {
            // Compute full path from base
            var path = ObjectPath.format(ObjectPath.parse(basePath + '.' + propertyPath));
            // Transform date string values into `Date` objects
            if ('string' === definition.type && _.includes([ 'date', 'date-time' ], definition.format)) {
                var value = _.get(scope, path), format = 'date' === definition.format ? DATE_FORMAT : DATETIME_FORMAT;
                if (_.isString(value)) {
                    value = format.parse(value);
                    ObjectUtils.set(scope, path, value);
                }
                definition["enum"] && (definition["enum"] = _.map(definition["enum"], function(val) {
                    _.isString(val) && (val = format.parse(val));
                    return _.isEqual(val, value) ? value : val;
                }));
            }
        }
        Preconditions.optional.checkObject(definitions, 'definitions');
        if (!definitions) {
            return this;
        }
        var scope = _scope.get(this), deregFns = _deregFns.get(this), basePath = _basePath.get(this);
        // Initialize definitions
        doInitialize(definitions);
        deregFns.push(scope.$watch(basePath, function() {
            // Re-initialize definitions
            doInitialize(definitions);
        }, !0));
        return this;
    }
    function Swagger2ScopeInitializerFactory() {}
    var DATE_FORMAT = Formats.date('Y-m-d'), DATETIME_FORMAT = Formats.get('iso8601'), _scope = dw$.hide('Swagger2ScopeInitializer.scope'), _basePath = dw$.hide('Swagger2ScopeInitializer.basePath'), _deregFns = dw$.hide('Swagger2ScopeInitializer.deregFns');
    Swagger2ScopeInitializer.prototype.initialize = function(definitions) {
        return initializeAll.call(this, definitions);
    };
    Swagger2ScopeInitializer.prototype.reset = deregister;
    Swagger2ScopeInitializerFactory.prototype.$new = function(scope, basePath) {
        return new Swagger2ScopeInitializer(scope, basePath);
    };
    dw$.constant('Swagger2ScopeInitializer', new Swagger2ScopeInitializerFactory());
});

dw$.invoke('Preconditions', 'ObjectPath', 'Validator', 'ObjectUtils', function(Preconditions, ObjectPath, Validator, ObjectUtils) {
    function obtainEnum(sequence, data) {
        var enumeration = _.get(data, 'definition.enum');
        enumeration && sequence.push({
            type: 'enumeration',
            values: enumeration
        });
    }
    function obtainRange(type) {
        return function(sequence, data) {
            var definition = _.get(data, 'definition'), sequenceDefinition = {
                type: type
            };
            !_.isUndefined(definition.minimum) && (sequenceDefinition.min = definition.minimum);
            _.isBoolean(definition.exclusiveMinimum) && (sequenceDefinition.minExclusive = definition.exclusiveMinimum);
            !_.isUndefined(definition.maximum) && (sequenceDefinition.max = definition.maximum);
            _.isBoolean(definition.exclusiveMaximum) && (sequenceDefinition.maxExclusive = definition.exclusiveMaximum);
            sequence.push(sequenceDefinition);
        };
    }
    function wrap(cb) {
        return function(sequence, data) {
            _.includes(data.required, data.property) && sequence.push({
                type: 'required'
            });
            // Execute default handler
            cb.apply(this, arguments);
        };
    }
    function wrapEnum(cb) {
        return wrap(function(sequence, data) {
            // Execute default handler
            cb.apply(this, arguments);
            // Handle enumerations
            obtainEnum.call(this, sequence, data);
        });
    }
    function Swagger2ValidatorRuleBuilderFactory() {}
    function buildField(data) {
        Preconditions.checkObject(data, 'data');
        Preconditions.checkString(data.property, 'data.property', 1);
        Preconditions.checkString(data.path, 'data.path', 1);
        Preconditions.checkObject(data.definition, 'data.definition');
        Preconditions.checkString(data.definition.type, 'data.definition.type', 1);
        Preconditions.optional.checkArray(data.required, 'data.required');
        var sequence = [], handler = HANDLERS[data.definition.type];
        handler && handler(sequence, data);
        return sequence;
    }
    var HANDLERS = {
        string: wrapEnum(function(sequence, data) {
            var definition = _.get(data, 'definition');
            if (_.includes([ 'date', 'date-time' ], definition.format)) {
                return obtainRange('date').apply(this, arguments);
            }
            var sequenceDefinition = {
                type: 'string'
            };
            _.isNumber(definition.minLength) && (sequenceDefinition.min = definition.minLength);
            _.isNumber(definition.maxLength) && (sequenceDefinition.max = definition.maxLength);
            sequence.push(sequenceDefinition);
            // Regular expression handling
            _.isString(definition.pattern) && sequence.push({
                type: 'regexp',
                expression: definition.pattern
            });
            // Email handling
            'email' === definition.format && sequence.push({
                type: 'email'
            });
        }),
        integer: wrapEnum(obtainRange('integer')),
        number: wrapEnum(obtainRange('number')),
        "boolean": wrapEnum(function(sequence) {
            sequence.push({
                type: 'boolean'
            });
        }),
        array: wrap(function(sequence, data) {
            var definition = _.get(data, 'definition'), itemDefinition = _.get(definition, 'items'), itemData = _(data).omit('required').assign({
                definition: itemDefinition
            }).value(), itemSequence = [], handler = HANDLERS[_.get(itemDefinition, 'type')];
            handler && handler(itemSequence, itemData);
            // Handle enumerations
            obtainEnum.call(this, itemSequence, data);
            var sequenceDefinition = {
                type: 'array',
                elements: Validator.rule(itemSequence)
            };
            _.isNumber(definition.minItems) && (sequenceDefinition.min = definition.minItems);
            _.isNumber(definition.maxItems) && (sequenceDefinition.max = definition.maxItems);
            sequence.push(sequenceDefinition);
        })
    };
    Swagger2ValidatorRuleBuilderFactory.prototype.build = function(definitions) {
        function doBuild(definitions, prefix) {
            _.each(definitions.properties, function(definition, property) {
                if (!_.isPlainObject(definition)) {
                    return;
                }
                var path = (prefix ? prefix + '.' : '') + property;
                path = ObjectPath.format(ObjectPath.parse(path));
                if (('object' === definition.type || _.isBlank(definition.type)) && _.has(definition, 'definition')) {
                    // Nested definition
                    var defType = _(definition.definition).keys().first();
                    doBuild(_.get(definition, 'definition["' + defType + '"]'), path);
                } else {
                    definition.type && ObjectUtils.set(sequences, path, buildField({
                        property: property,
                        path: path,
                        definition: definition,
                        required: definitions.required
                    }));
                }
            });
        }
        Preconditions.checkObject(definitions, 'definitions');
        Preconditions.checkObject(definitions.properties, 'definitions.properties');
        Preconditions.optional.checkArray(definitions.required, 'definitions.required');
        var sequences = {};
        doBuild(definitions);
        return Validator.rule(sequences);
    };
    dw$.constant('Swagger2ValidatorRuleBuilder', new Swagger2ValidatorRuleBuilderFactory());
});

dw$.controller('WelcomeCtrl', [ '$scope', 'Workspaces', 'WorkspacesManager', 'Permissions', function($scope, Workspaces, WorkspacesManager, Permissions) {
    function navigate(instance) {
        return function(type, route) {
            return function() {
                instance.navigate(Workspaces.active(), type || 'empty', route || '');
            };
        };
    }
    // Permissions
    $scope.permissions = {
        orderSearch: Permissions.orderSearch(),
        orderCreate: Permissions.orderCreate()
    };
    $scope.navigate = navigate(WorkspacesManager);
    $scope.navigateUnique = navigate(WorkspacesManager.unique);
} ]);

dw$.invoke('Interactions', 'Preconditions', 'Forbidder', function(Interactions, Preconditions, Forbidder) {
    function obtainSidebar() {
        return angular.element(document.querySelector('.dw-layout .dw-layout-sidebar-right'));
    }
    function obtainSidebarBody() {
        var sidebarNode = obtainSidebar()[0];
        return angular.element(sidebarNode ? sidebarNode.querySelector('.dw-layout-sidebar-body') : sidebarNode);
    }
    function obtainSidebarHeader() {
        var sidebarNode = obtainSidebar()[0];
        return angular.element(sidebarNode ? sidebarNode.querySelector('.dw-layout-sidebar-header') : sidebarNode);
    }
    function obtainSidebarFooter() {
        var sidebarNode = obtainSidebar()[0];
        return angular.element(sidebarNode ? sidebarNode.querySelector('.dw-layout-sidebar-footer') : sidebarNode);
    }
    function clearSidebar() {
        obtainSidebarHeader().empty();
        obtainSidebarBody().empty();
        obtainSidebarFooter().empty();
    }
    function rejectCurrentDeferred(result) {
        0 === arguments.length && (result = internalContext);
        currentDeferred && currentDeferred.reject(result);
        currentDeferred = null;
        activeWorkspaceWatcher && activeWorkspaceWatcher();
        activeWorkspaceWatcher = null;
    }
    // Preserve the internal `$deferred` object of the latest/current sidebar interaction
    var currentDeferred = null, activeWorkspaceWatcher = null, internalContext = {};
    Interactions.sidebarRight = function(config) {
        function obtainForbidder() {
            if (!forbidder) {
                var sidebarNode = obtainSidebar()[0];
                sidebarNode && (forbidder = Forbidder.$new(sidebarNode, sidebarNode, function(siblingEl) {
                    return siblingEl.hasClass('dw-layout-content');
                }));
            }
            return forbidder;
        }
        function toggleSidebar(visible) {
            var forbidder = obtainForbidder();
            forbidder && forbidder.toggle(visible);
            return obtainSidebar().toggleClass('is-visible', visible);
        }
        Preconditions.optional.checkObject(config, 'config');
        config = config || {};
        // Reject eventually existing sidebar interaction
        rejectCurrentDeferred();
        // Set defaults
        var defaults = {
            template: null
        }, forbidder = null;
        return dw$.interaction(_.assign({}, config, {
            controller: [ '$scope', '$config', '$deferred', '$interaction', '$q', '$compile', '$controller', '$injector', 'Workspaces', function($scope, $config, $deferred, $interaction, $q, $compile, $controller, $injector, Workspaces) {
                function resolve() {
                    // Close sidebar
                    toggleSidebar(!1);
                    $deferred.resolve.apply($deferred, _.toArray(arguments));
                    // Clear sidebar content
                    clearSidebar();
                }
                function reject(result) {
                    if (result === internalContext) {
                        $deferred.reject();
                        forbidder.toggle(!1);
                    } else {
                        // Close sidebar
                        toggleSidebar(!1);
                        $deferred.reject.apply($deferred, _.toArray(arguments));
                        // Clear sidebar content
                        clearSidebar();
                    }
                }
                function header(content, scope) {
                    Interactions.sidebarRight.header(content, scope || effectiveScope);
                    return this;
                }
                function footer(content, scope) {
                    Interactions.sidebarRight.footer(content, scope || effectiveScope);
                    return this;
                }
                // Reject eventually existing sidebar interaction
                rejectCurrentDeferred();
                // Preserve current `$deferred` object to resolve or reject the sidebar's public `$deferred` object based on the internal state of the encapsulated interaction
                currentDeferred = $q.defer();
                currentDeferred.promise.then(resolve, reject);
                // Clear existing sidebar content
                clearSidebar();
                // Ensure sidebar closes on scope destruction (when closing the workspace for instance)
                $scope.$on('$destroy', _.wrap(void 0, rejectCurrentDeferred));
                // Ensure eventually open sidebar closes on active workspace change
                activeWorkspaceWatcher = $scope.$watch(Workspaces.active, function(newActive, oldActive) {
                    !_.isEqual(newActive, oldActive) && rejectCurrentDeferred(void 0);
                });
                // Provide interaction API
                $interaction.header = header;
                $interaction.footer = footer;
                // Execute configured controller function
                var sidebarBodyEl = obtainSidebarBody(), effectiveScope = $scope.$new(), ctrl = _.get(config, 'controller');
                ctrl && // Invoke configured controller
                $controller(ctrl, {
                    $scope: effectiveScope,
                    $config: $config,
                    $deferred: currentDeferred,
                    $element: sidebarBodyEl,
                    $interaction: $interaction
                });
                // Show right sidebar and compile/inject configured template into it
                var interceptVisibleFn = _.get(config, 'interceptors.show'), interceptVisibleCallback = _.wrap(!0, toggleSidebar);
                if (interceptVisibleFn) {
                    // Provide way to influence the time when the sidebar becomes visibile
                    var visibilityDeferred = $q.defer();
                    visibilityDeferred.promise.then(interceptVisibleCallback, $deferred.reject);
                    $injector.invoke(interceptVisibleFn, interceptVisibleFn, {
                        $scope: effectiveScope,
                        $config: $config,
                        $deferred: visibilityDeferred,
                        $element: sidebarBodyEl,
                        $interaction: $interaction
                    });
                } else {
                    // Immediately show the sidebar
                    interceptVisibleCallback();
                }
                // Compile contents into the sidebar's body
                sidebarBodyEl.html(_.get(config, 'defaults.template'));
                $compile(sidebarBodyEl)(effectiveScope);
            } ],
            defaults: _.defaults({}, defaults, config.defaults)
        }));
    };
    Interactions.sidebarRight.header = dw$.inject('$compile', function($compile, content, scope) {
        var headerEl = obtainSidebarHeader().toggleClass('ng-hide', !content);
        content ? headerEl.html(content) : headerEl.empty();
        $compile(headerEl)(scope);
    });
    Interactions.sidebarRight.footer = dw$.inject('$compile', function($compile, content, scope) {
        var footerEl = obtainSidebarFooter().toggleClass('ng-hide', !content);
        content ? footerEl.html(content) : footerEl.empty();
        $compile(footerEl)(scope);
    });
});

dw$.directive('cscCrossCloudUserMenu', [ 'Configuration', 'Urls', 'Messages', 'CrossCloudNavigation', '$window', function(Configuration, Urls, Messages, CrossCloudNavigation, $window) {
    return {
        template: "<div class=\"csc-user-menu\">  <button class=\"dw-button dw-button-link\" id=\"cscxc-usermenu-button\" ng-click=\"userMenu.toggle()\">    <span class=\"dw-icon dw-glyph-user-circle-o dw-icon-pull-left\" role=\"img\"></span>    <span class=\"dw-label\">{{state.labelUser}}</span>  </button>  <button class=\"dw-button dw-button-link\" id=\"cscxc-sitesmenu-button\" disabled>{{state.labelSite}}</button></div><div class=\"dw-popover csc-popover-user-menu dw-arrow-top-right\" dw-popover-anchor=\"userMenu.target\" dw-popover-visible=\"userMenu.isVisible\" dw-popover-constraints=\"'window'\" dw-blur=\"userMenu.hide()\" dw-blur-enabled=\"userMenu.isVisible\" dw-key=\"userMenu.hide()\" dw-key-enabled=\"userMenu.isVisible\">  <div class=\"dw-popover-body\">    <button ng-repeat=\"item in userMenu.list\" class=\"dw-button dw-button-block dw-button-link\" ng-click=\"item.action()\">{{item.label}}</button>  </div></div>",
        controller: [ '$scope', '$element', function($scope, $element) {
            function makeMenuState(target, list) {
                return {
                    isVisible: !1,
                    toggle: function() {
                        $scope.userMenu.isVisible = !$scope.userMenu.isVisible;
                    },
                    list: list,
                    hide: function() {
                        $scope.userMenu.isVisible = !1;
                    },
                    target: target
                };
            }
            function startChangePassword() {
                CrossCloudNavigation.showChangePassword();
                $scope.userMenu.isVisible = !1;
            }
            function logout() {
                var href = Urls.bmlegacy('ViewApplication-Logout');
                if ($window.opener) {
                    // log out in the window that opened this one ...
                    $window.opener.location.href = href;
                    $window.close();
                } else {
                    // if the original window/tab doesn't exist anymore, just log out
                    $window.location.href = href;
                }
            }
            $scope.state = {
                labelUser: _.get(Configuration.env, 'user.login'),
                labelSite: _.get(Configuration.env, 'site.site_name')
            };
            var userActions = [];
            // the support user cannot change their password from BM
            // TODO: the support user may go by other names and this should be extracted. W-5097385
            'support' !== $scope.state.labelUser && userActions.push({
                label: Messages.get('common.sidebar.action.changepassword'),
                action: startChangePassword
            });
            userActions.push({
                label: Messages.get('common.sidebar.action.logout'),
                action: logout
            });
            $scope.userMenu = makeMenuState($element[0].querySelector('#cscxc-usermenu-button'), userActions);
        } ]
    };
} ]);

dw$.directive('cscCustomAction', [ '$compile', '$timeout', '$http', function($compile, $timeout, $http) {
    function templateHeader() {
        return '<h1>{{dwModel.title || dwModel.action_id}}</h1>';
    }
    function templateFooter() {
        return '<button class="dw-button dw-button-primary" ng-click="dwCancel()">{{\'common.button.close\' | Messages}}</button>';
    }
    function computedSidebarStyle() {
        return getComputedStyle(document.querySelector(SIDEBAR_SELECTOR));
    }
    var SIDEBAR_SELECTOR = '.dw-layout-sidebar-right .dw-layout-sidebar-body';
    return {
        restrict: 'E',
        replace: !1,
        scope: {
            dwInteraction: '=',
            dwModel: '=',
            dwCancel: '='
        },
        template: '<div class="csc-custom-action" dw-key="dwCancel()"></div>',
        link: function($scope, $element) {
            function onLoad(response) {
                $scope.action = _.get(response, 'data', {});
                compileFrame();
                resizeFrame();
                angular.element(window).on('resize', resizeFrame);
                $scope.$emit('csc.customization.data', $scope.action);
            }
            function compileFrame() {
                var contentEl = angular.element($element[0].querySelector('.csc-custom-action'));
                contentEl.empty().append(templateFrame());
                $compile(contentEl)($scope);
            }
            function templateFrame() {
                return '<iframe ng-src="{{action.href | SafeResourceUrl}}" width="100%"></iframe>';
            }
            function resizeFrame() {
                function property(prop) {
                    var propertyValue = computed ? computed.getPropertyValue(prop) : 0;
                    return propertyValue ? parseInt(propertyValue, 10) : 0;
                }
                var computed = computedSidebarStyle(), height = property('height'), border = property('border-top') + property('border-bottom'), margin = property('margin-top') + property('margin-bottom'), padding = property('padding-top') + property('padding-bottom');
                angular.element($element[0].querySelector('iframe')).css('height', height - border - margin - padding - 4 + 'px');
            }
            // Set sidebar interaction header and footer content
            $scope.dwInteraction.header(templateHeader(), $scope).footer(templateFooter(), $scope);
            // Load the actual action payload and let the server prepare some authentication steps, etc.
            var url = _.get($scope, 'dwModel.href');
            $http.get(url, {
                dw$scope: $scope,
                responseType: 'json',
                withCredentials: !0
            }).then(onLoad);
        }
    };
} ]);

dw$.directive('cscCustomActions', [ 'Interactions', '$compile', '$parse', function(Interactions, $compile, $parse) {
    function insertAfter(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }
    return {
        restrict: 'C',
        scope: {
            dwModel: '=',
            dwStaticActions: '='
        },
        link: function($scope, $element, $attrs) {
            function compileTemplate(actions) {
                if (actions === $scope.dwStaticActions && $scope.dwModel.length > 0) {
                    /*
					I don't want to introduce more state than necessary to this directive. However, compileTemplate can be called if the staticActions or the customActions have changed.
					As a result, it is possible that compileTemplate is called twice and in the worst case, the staticActions call will overwrite the existing template. This check prevents
					that from happening. If both customActions and staticActions are defined, only the customActions call will compile the template.
					 */
                    return;
                }
                // (Re-)Initialize state
                initializeState();
                // Hide element if there aren't any actions
                $element.toggleClass('dw-hide', _.isEmpty(actions));
                dropdownMenuEl.empty().append(templateMenuContent(actions));
                $compile(dropdownMenuEl)($scope);
            }
            function templateMenuContent(actions) {
                if (_.isEmpty(actions)) {
                    return '';
                }
                var tpls = [ '<ul class="dw-dropdown-menu-list">' ];
                _.forEach(actions, function(action) {
                    var actionId = action.action_id;
                    $scope.state.actions[actionId] = action;
                    $scope.state.enabled[actionId] = !0;
                    $scope.state.loading[actionId] = !1;
                    action.execute || (action.execute = _.partial(execute, action));
                    var handoffClass = 'hand-off-basket' === actionId ? ' csc-handOffBasket' : '';
                    tpls.push('<li class="dw-dropdown-menu-item"><a class="dw-dropdown-menu-link ' + handoffClass + '" href="javascript:void(0);" ng-click="state.actions[\'' + actionId + '\'].execute()"><span class="dw-icon dw-icon-pull-left" role="img" ng-class="{\'dw-iconleft\': state.loading[\'' + actionId + '\'], \'dw-glyph-circle-o-notch\': state.loading[\'' + actionId + '\'], \'dw-glyph-spin\': state.loading[\'' + actionId + '\']}"></span><span class="dw-label">{{state.actions[\'' + actionId + '\'].title || state.actions[\'' + actionId + '\'].action_id}}</span></a></li>');
                });
                tpls.push('</ul>');
                return tpls.join('');
            }
            function unshiftStaticActions(customActions, staticActions) {
                // If we change the original object this will cause too many $digest cycles
                var allActions = Array.prototype.slice.call(customActions, 0);
                _.isEmpty(staticActions) || _.map(staticActions, function(action) {
                    allActions.unshift(action);
                });
                return allActions;
            }
            function initializeState() {
                $scope.state = {
                    visible: !1,
                    actions: {},
                    enabled: {},
                    loading: {}
                };
            }
            function toggleMenu() {
                $scope.$evalAsync(function() {
                    $scope.state.visible = !$scope.state.visible;
                });
            }
            function execute(action) {
                event && event.preventDefault && event.preventDefault();
                var actionId = action.action_id;
                event && event.preventDefault && event.preventDefault();
                $scope.state.visible = !1;
                $scope.state.enabled[actionId] = !1;
                $scope.state.loading[actionId] = !0;
                Interactions.sidebarRight({
                    scope: $scope,
                    interceptors: {
                        show: [ '$scope', '$deferred', function(sidebarScope, $deferred) {
                            var deregFn = sidebarScope.$on('csc.customization.data', function() {
                                deregFn();
                                $scope.state.loading[actionId] = !1;
                                $deferred.resolve();
                            });
                        } ]
                    },
                    controller: [ '$scope', '$deferred', '$interaction', function(sidebarScope, $deferred, $interaction) {
                        sidebarScope.$interaction = $interaction;
                        sidebarScope.action = action;
                        sidebarScope.cancel = $deferred.reject;
                    } ],
                    defaults: {
                        template: '<csc-custom-action dw-interaction="$interaction" dw-model="action" dw-cancel="cancel"></csc-custom-action>'
                    }
                })["catch"](function() {
                    var handler = $parse($attrs.dwHandler)($scope.$parent);
                    _.isFunction(handler) && handler();
                })["finally"](function() {
                    $scope.state.visible = !1;
                    $scope.state.enabled[actionId] = !0;
                    $scope.state.loading[actionId] = !1;
                })();
            }
            // Initialize dropdown menu
            var dropdownMenuEl = angular.element('<div class="csc-custom-actions-list dw-dropdown-menu" ng-class="{\'dw-hide\': !state.visible}" dw-key="state.visible = false" dw-key-enabled="state.visible === true" dw-blur="state.visible = false" dw-blur-enabled="state.visible === true"></div>');
            insertAfter(dropdownMenuEl[0], $element[0]);
            // Ensure button classes
            $element.toggleClass('dw-button', !0);
            $element.toggleClass('dw-button-dropdown', !0);
            // Initialize events
            $element.on('click', toggleMenu);
            // Initialize state
            initializeState();
            // Initialize actions
            $scope.execute = execute;
            $scope.$watchCollection('dwModel', function(customActions) {
                var allActions = unshiftStaticActions(customActions, $scope.dwStaticActions);
                compileTemplate(allActions);
            });
            /*
			This watcher is necessary because the state of $scope.dwStaticActions might depend outside circumstances e.g. a basket or customer must be present. (We cannot hand a basket off to a non-existing customer, can we?)
			However, at the linking stage, when this function is called, we cannot guarantee that the data is present. So, this watcher waits for the array to be filled.
			 */
            $scope.$watchCollection('dwStaticActions', compileTemplate);
        }
    };
} ]);

dw$.directive('cscCustomDataTable', [ 'CustomizationUrl', '$http', '$sce', '$compile', '$log', function(CustomizationUrl, $http, $sce, $compile, $log) {
    return {
        restrict: 'C',
        scope: !0,
        controller: [ '$scope', function($scope) {
            // Expose API
            this.meta = function() {
                return _.cloneDeep(_.get($scope, 'dw$cscCustomDataTableWidgets', {}));
            };
            $scope.dw$cscCustomDataTableCtrl = [ '$scope', function(rowScope) {
                rowScope.data = rowScope.dw$row;
            } ];
        } ],
        compile: function(templateEl) {
            // Store contents for later transclusion
            var shadowEl = angular.copy(templateEl);
            // Stop contents from being compiled
            templateEl.empty();
            return function($scope, $element, $attrs) {
                var columnIdx = $scope.$eval($attrs.dwColumn);
                (!_.isNumber(columnIdx) || columnIdx < 0) && (columnIdx = 0);
                var position = $scope.$eval($attrs.dwPosition);
                _.includes([ 'before', 'after' ], position) || (position = 'before');
                var dataTableId = $attrs.dwTableId, gridColumnNodes = shadowEl[0].querySelectorAll('DW\\:GRID-COLUMN'), gridColumnNode = gridColumnNodes[columnIdx];
                if (_.isBlank(dataTableId)) {
                    $log.warn('<csc-custom-data-table>: Not a string "dw-table-id">');
                    return;
                }
                if (!_.isElement(gridColumnNode)) {
                    $log.warn('<csc-custom-data-table>: Not an element "dw-column">');
                    return;
                }
                var url = CustomizationUrl.grid(dataTableId);
                $http.get($sce.getTrustedResourceUrl(url)).then(function(response) {
                    // Set `widgets` in scope
                    var widgets = _.get(response, 'data.widgets', {});
                    $scope.widgets = widgets;
                    $scope.dw$cscCustomDataTableWidgets = _.cloneDeep(widgets);
                    var template = _.get(response, 'data.template'), templateEls = _.isNotBlank(template) ? angular.element(template) : null, parentNode = gridColumnNode.parentNode;
                    if ('before' === position) {
                        _.forEach(templateEls, function(node) {
                            _.isElement(node) && parentNode.insertBefore(node, gridColumnNode);
                        });
                    } else {
                        var referenceNode = gridColumnNode, lastGridColumnNode = _.last(gridColumnNodes), appendColumns = referenceNode === lastGridColumnNode;
                        _.forEach(templateEls, function(node) {
                            if (_.isElement(node)) {
                                if (appendColumns) {
                                    parentNode.appendChild(node);
                                } else {
                                    parentNode.insertBefore(node, referenceNode.nextSibling);
                                    referenceNode = node;
                                }
                            }
                        });
                    }
                })["finally"](function() {
                    // Finally compile grid
                    $element.empty().append(shadowEl.contents());
                    $compile($element.children())($scope);
                });
            };
        }
    };
} ]);

dw$.invoke('SearchFilters', 'Validator', function(SearchFilters, Validator) {
    function NumberEditorCtrl($scope) {
        $scope.dw$validator = Validator.of(RULE);
    }
    var RULE = Validator.rule({
        dw$filter: {
            value: Validator.rule().required().number()
        }
    });
    SearchFilters.type('number', {
        editor: {
            controller: [ '$scope', NumberEditorCtrl ],
            validator: 'dw$validator',
            template: '<div class="dw-decimal"><dw:text-field name="input" dw-model="dw$filter.value" dw-format="decimal" dw-default-focus></dw:text-field></div>'
        },
        value: {
            template: '<div class="dw-decimal">{{ dw$filter.value | Formats:\'decimal\' }}</div>'
        }
    });
});

dw$.directive('cscSidebar', [ 'Messages', 'WorkspacesManager', 'Permissions', 'Configuration', function(Messages, WorkspacesManager, Permissions, Configuration) {
    function toggleSidebarClasses(expanded) {
        angular.element(document.querySelector('.dw-layout-frame .dw-layout')).toggleClass('dw-layout-sidebar-collapsed', !expanded);
    }
    return {
        restrict: 'E',
        replace: !1,
        scope: !0,
        template: '<div class="csc-sidebar"><div class="csc-sidebar-toggle"><button class="dw-button" ng-click="toggle()"><span class="dw-icon" ng-class="{\'dw-glyph-chevron-right\': !sidebarExpanded, \'dw-glyph-chevron-left\': sidebarExpanded}" role="img" dw-tooltip="labelExpandCollapse"></span></button></div><div class="csc-sidebar-title"><span class="dw-icon dw-icon-pull-left" role="img"></span> <span class="dw-label" ng-show="sidebarExpanded">{{\'common.label.csc\' | Messages}}</span></div><div class="csc-sidebar-actions"><div class="csc-sidebar-action"><button class="dw-button" ng-click="navigateUnique(\'welcome\')"><span class="dw-icon dw-glyph-dashboard dw-icon-pull-left csc-welcome" role="img" dw-tooltip="common.sidebar.action.welcome" dw-tooltip-enabled="!sidebarExpanded"></span> <span class="dw-label" ng-show="sidebarExpanded">{{\'common.sidebar.action.welcome\' | Messages}}</span></button></div><div class="csc-sidebar-action" ng-show="permissions.orderSearch"><button class="dw-button" ng-click="navigateUnique(\'orders\')"><span class="dw-icon dw-glyph-archive dw-icon-pull-left csc-orderSearch" role="img" dw-tooltip="common.sidebar.action.orderSearch" dw-tooltip-enabled="!sidebarExpanded"></span> <span class="dw-label" ng-show="sidebarExpanded">{{\'common.sidebar.action.orderSearch\' | Messages}}</span></button></div><div class="csc-sidebar-action" ng-show="permissions.orderCreate"><button class="dw-button" ng-click="navigate(\'orders\', \'create\')"><span class="dw-icon dw-glyph-file-o dw-icon-pull-left csc-orderCreate" role="img" dw-tooltip="common.sidebar.action.orderCreate" dw-tooltip-enabled="!sidebarExpanded"></span> <span class="dw-label" ng-show="sidebarExpanded">{{\'common.sidebar.action.orderCreate\' | Messages}}</span></button></div><div class="csc-sidebar-action" ng-show="permissions.orderCreate"><button class="dw-button" ng-click="navigateUnique(\'customers\')"><span class="dw-icon dw-glyph-user dw-icon-pull-left csc-customerSearch" role="img" dw-tooltip="common.sidebar.action.customerSearch" dw-tooltip-enabled="!sidebarExpanded"></span> <span class="dw-label" ng-show="sidebarExpanded">{{\'common.sidebar.action.customerSearch\' | Messages}}</span></button></div><div class="csc-sidebar-copyright" ng-show="sidebarExpanded">{{\'common.sidebar.message.copyright\' | Messages : copyrightYear}}</div></div></div>',
        controller: [ '$scope', function($scope) {
            function navigate(instance) {
                return function(type, route) {
                    instance.open(type || 'empty', route || '');
                };
            }
            function get(configKey) {
                return _.get(Configuration.env, 'pendo_configuration[' + configKey + ']');
            }
            function displayPendoSnippet() {
                var isEnabled = get('is_enabled', !1);
                // Call this whenever information about your visitors becomes available' +
                // Please use Strings, Numbers, or Bools for value types.' +
                if (isEnabled) {
                    var hashId = get('hash_id'), accountId = get('account_id'), dataLocale = get('data_locale'), uiLocale = get('uilocale');
                    /* global pendo */
                    // pendo is defined in the pendo.js file that is loaded in the dw.ui.ecom.csc module in Routes.js
                    pendo.initialize({
                        sanitizeUrl: function(url) {
                            var scratchUrl = url.substring(0, url.indexOf('?')).replace(/\/\/(.*?\/)/, '//private_host/');
                            return scratchUrl;
                        },
                        excludeAllText: !0,
                        excludeTitle: !0,
                        apiKey: 'fbba7534-afa1-4c2f-7912-828f3a99a901',
                        visitor: {
                            id: '' + hashId,
                            uiLocale: '' + uiLocale,
                            dataLocale: '' + dataLocale
                        },
                        account: {
                            id: '' + accountId
                        }
                    });
                }
            }
            $scope.labelExpandCollapse = Messages.get('common.sidebar.action.expand');
            // Permissions
            $scope.permissions = {
                orderSearch: Permissions.orderSearch(),
                orderCreate: Permissions.orderCreate()
            };
            // Sidebar handlers
            $scope.sidebarExpanded = !1;
            toggleSidebarClasses(!1);
            $scope.toggle = function() {
                $scope.sidebarExpanded = !$scope.sidebarExpanded;
                toggleSidebarClasses($scope.sidebarExpanded);
                $scope.labelExpandCollapse = Messages.get('common.sidebar.action.' + ($scope.sidebarExpanded ? 'collapse' : 'expand'));
            };
            $scope.navigate = navigate(WorkspacesManager);
            $scope.navigateUnique = navigate(WorkspacesManager.unique);
            $scope.copyrightYear = new Date().getFullYear();
            displayPendoSnippet();
        } ]
    };
} ]);

dw$.directive('cscUserMenu', [ 'Configuration', 'Urls', 'Messages', '$window', 'Interactions', function(Configuration, Urls, Messages, $window, Interactions) {
    return {
        template: "<div class=\"csc-user-menu\">  <button class=\"dw-button dw-button-link csc-userMenu\" id=\"csc-usermenu-button\" ng-click=\"userMenu.toggle()\">    <span class=\"dw-icon dw-glyph-user-circle-o dw-icon-pull-left\" role=\"img\"></span>    <span class=\"dw-label\">{{state.labelUser}}</span>  </button>  <button class=\"dw-button dw-button-link csc-siteMenu\" id=\"csc-sitesmenu-button\" ng-click=\"sitesMenu.toggle()\">{{state.labelSite}}</button></div><div class=\"dw-popover csc-popover-user-menu dw-arrow-top-right\" dw-popover-anchor=\"userMenu.target\" dw-popover-visible=\"userMenu.isVisible\" dw-popover-constraints=\"'window'\" dw-blur=\"userMenu.hide()\" dw-blur-enabled=\"userMenu.isVisible\" dw-key=\"userMenu.hide()\" dw-key-enabled=\"userMenu.isVisible\">  <div class=\"dw-popover-body\">    <button ng-repeat=\"item in userMenu.list\" class=\"dw-button dw-button-block dw-button-link\" ng-click=\"item.action()\">{{item.label}}</button>  </div></div><div class=\"dw-popover csc-popover-user-menu dw-arrow-top-right\" dw-popover-anchor=\"sitesMenu.target\" dw-popover-visible=\"sitesMenu.isVisible\" dw-popover-constraints=\"'window'\" dw-blur=\"sitesMenu.hide()\" dw-blur-enabled=\"sitesMenu.isVisible\" dw-key=\"sitesMenu.hide()\" dw-key-enabled=\"sitesMenu.isVisible\">  <div class=\"dw-popover-body\">    <ul class=\"dw-popover-list\">      <li ng-repeat=\"item in sitesMenu.list\" class=\"dw-popover-list-item\">        <a ng-href=\"{{item.url}}\" ng-click=\"item.action()\" target=\"_blank\">{{item.label}}</a>      </li>    </ul>  </div></div>",
        controller: [ '$scope', '$element', function($scope, $element) {
            function makeSitesList() {
                return _.map(_.remove(Configuration.env.sites, function(item) {
                    return item.site_name !== Configuration.env.site.site_name;
                }), function(item) {
                    return {
                        label: item.site_name,
                        action: confirmAndClose,
                        siteUrl: Urls.bmlegacy('ScreenDispatcher-CSC', {
                            site: item.site_id
                        })
                    };
                });
            }
            function confirmAndClose() {
                var url = this.siteUrl;
                Interactions.confirm({
                    scope: $scope,
                    defaults: {
                        message: 'common.message.switchSite.confirm'
                    }
                }).then(function() {
                    $window.open(url);
                    $window.close();
                })();
            }
            function makeMenuState(target, list) {
                return {
                    isVisible: !1,
                    toggle: function() {
                        this.isVisible = !this.isVisible;
                    },
                    list: list,
                    hide: function() {
                        this.isVisible = !1;
                    },
                    target: target
                };
            }
            function logout() {
                var href = Urls.bmlegacy('ViewApplication-Logout');
                if ($window.opener) {
                    // log out in the window that opened this one ...
                    $window.opener.location.href = href;
                    $window.close();
                } else {
                    // if the original window/tab doesn't exist anymore, just log out
                    $window.location.href = href;
                }
            }
            $scope.state = {
                labelUser: _.get(Configuration.env, 'user.login'),
                labelSite: _.get(Configuration.env, 'site.site_name')
            };
            $scope.userMenu = makeMenuState($element[0].querySelector('#csc-usermenu-button'), [ {
                label: Messages.get('common.sidebar.action.logout'),
                action: logout
            } ]);
            $scope.sitesMenu = makeMenuState($element[0].querySelector('#csc-sitesmenu-button'), makeSitesList());
        } ]
    };
} ]);

dw$.directive('cscWidgetArea', [ 'Preconditions', 'CustomizationUrl', 'ObjectPath', 'Swagger2PostDataPreparer', 'Swagger2ScopeInitializer', 'Swagger2ConditionWatcher', '$cacheFactory', '$timeout', '$http', '$q', '$sce', 'ObjectUtils', function(Preconditions, CustomizationUrl, ObjectPath, Swagger2PostDataPreparer, Swagger2ScopeInitializer, Swagger2ConditionWatcher, $cacheFactory, $timeout, $http, $q, $sce, ObjectUtils) {
    return {
        restrict: 'E',
        replace: !1,
        scope: !0,
        template: "<dwx:customizable>  <div class=\"csc-widget-area\">    <dwx:include href=\"{{href}}\" dw-config=\"httpConfig\"></dwx:include>  </div></dwx:customizable>",
        controller: [ '$scope', '$attrs', '$element', function($scope, $attrs, $element) {
            function obtainComponentCache(key) {
                if (_.isNotBlank(key)) {
                    return componentCache.get(key) || componentCache.put(key, {});
                }
                return componentCache;
            }
            function updateObservables() {
                // Deregister old watchers
                _.forEach(observedDeregFns, function(deregFn) {
                    deregFn();
                });
                observedDeregFns = [];
                observedAttrs = [];
                var newObservables = _.get($scope, 'dwx$observables');
                !_.isEmpty(newObservables) && _.forEach(newObservables, function(attribute) {
                    var effectiveAttrsArr = ObjectPath.parse('data.' + attribute), effectiveAttrs = ObjectPath.format(effectiveAttrsArr);
                    observedAttrs.push({
                        key: ObjectPath.format(effectiveAttrsArr.slice(1)),
                        val: effectiveAttrs
                    });
                    observedDeregFns.push($scope.$watch(effectiveAttrs, function() {
                        if (_.isUndefined(observedDeregFns.dw$ready)) {
                            // Suppress first invocation in order to prevent endless loading loops
                            observedDeregFns.dw$ready = !0;
                            return;
                        }
                        // Trigger `loadData`
                        loadData.call(null, arguments);
                    }));
                });
            }
            function obtainParams() {
                var effectiveParams = {};
                // Add params
                $attrs.dwParams && _.assign(effectiveParams, _.get($scope, $attrs.dwParams));
                // Add GET params
                $attrs.dwParamsGet && _.assign(effectiveParams, _.get($scope, $attrs.dwParamsGet));
                // Add observed attributes
                !_.isEmpty(observedAttrs) && _.transform(observedAttrs, function(result, attribute) {
                    var value = _.get($scope, attribute.val);
                    !_.isUndefined(value) && (result[attribute.key] = value);
                }, effectiveParams);
                return effectiveParams;
            }
            function loadData() {
                timeoutLoadData && $timeout.cancel(timeoutLoadData);
                timeoutLoadData = $timeout(function() {
                    timeoutLoadData = null;
                    if (!conditionWatcher) {
                        // Scope is already destoyed
                        return;
                    }
                    if (_.isNotBlank($attrs.href)) {
                        $scope.href = $attrs.href;
                    } else {
                        var params = obtainParams();
                        _.isEmpty(params) ? $scope.href = null : $scope.href = CustomizationUrl.area($attrs.dwAreaId, params);
                    }
                });
            }
            function updateData() {
                if (!conditionWatcher) {
                    // Scope is already destoyed
                    return;
                }
                conditionWatcher.reset();
                scopeInitializer.reset();
                $scope.data = _.cloneDeep($scope.dwx$data);
                $scope.widgets = {};
                // TODO(seckardt): This check can be changed to `_.isArrayLikeObject(data)` with Lodash 4
                // Array data needs to be treated differently. This happens inside generic widgets like the `csc:attribute-layout` or `csc:attribute-form`.
                var isArrayLike = _.isPlainObject($scope.data) && _.has($scope.data, 'length');
                _.forEach($scope.dwx$widgets, function(widgetDef, widgetId) {
                    var definitionsArr = _.get(widgetDef, 'meta');
                    if (_.isArray(definitionsArr)) {
                        _.forEach(definitionsArr, function(definitions) {
                            scopeInitializer.initialize(definitions);
                        });
                        if (isArrayLike) {
                            ObjectUtils.set($scope, 'widgets["' + widgetId + '"]', widgetDef);
                        } else {
                            var effectiveWidgetDef = _.omit(widgetDef, 'meta');
                            ObjectUtils.set($scope, 'widgets["' + widgetId + '"]', effectiveWidgetDef);
                            conditionWatcher.watch(definitionsArr, function(definitions) {
                                _.isEqual(definitions, _.get($scope, 'widgets["' + widgetId + '"].meta')) || ObjectUtils.set($scope, 'widgets["' + widgetId + '"].meta', definitions);
                            });
                        }
                    } else {
                        ObjectUtils.set($scope, 'widgets["' + widgetId + '"]', widgetDef);
                    }
                });
                invokeReadyCallback();
                updateObservables();
                // Deferred to wait for contents to render within the digest cycle.
                // Important: If the widget area is located inside a sidebar, we need to make sure that the CSS animation
                // has finished in order to prevent interferences. - Steffen
                var updateDelay = obtainIsInsideSidebar() ? 500 : 0;
                timeoutUpdateData && $timeout.cancel(timeoutUpdateData);
                timeoutUpdateData = $timeout(function() {
                    timeoutUpdateData = null;
                    if (!conditionWatcher) {
                        // Scope is already destoyed
                        return;
                    }
                    $scope.$emit('csc.customization.data', $scope.data, {
                        href: $scope.href,
                        area_id: $attrs.dwAreaId,
                        element: $element,
                        actions: _.cloneDeep($scope.dwx$actions)
                    });
                }, updateDelay, !1);
            }
            function onElementDestroy() {
                !$scope.$$destroyed && $scope.$destroy();
            }
            function onDestroy() {
                timeoutLoadData && $timeout.cancel(timeoutLoadData);
                timeoutLoadData = null;
                timeoutUpdateData && $timeout.cancel(timeoutUpdateData);
                timeoutUpdateData = null;
                conditionWatcher.reset();
                conditionWatcher = null;
                scopeInitializer.reset();
                scopeInitializer = null;
                componentCache.destroy();
                componentCache = null;
                observedDeregFns = null;
                observedAttrs = null;
                invokeReadyCallback = null;
                httpConfig = null;
            }
            function obtainIsInsideSidebar() {
                if (!_.isBoolean(isInsideSidebar)) {
                    var sidebarRightNode = document.querySelector('.dw-layout .dw-layout-sidebar-right');
                    isInsideSidebar = !!sidebarRightNode && sidebarRightNode.contains($element[0]);
                }
                return isInsideSidebar;
            }
            // Expose `WidgetAreaComponentCtrl`
            function WidgetAreaComponentCtrl() {}
            Preconditions.checkArgument(_.isNotBlank($attrs.dwAreaId) || _.isNotBlank($attrs.href), 'Not a string: dw-area-id or href');
            var componentCacheId = _.uniqueId('dw$widgetAreaComponentCacheId'), componentCache = $cacheFactory(componentCacheId), httpConfig = _.get($scope, $attrs.dwHttpConfig), conditionWatcher = Swagger2ConditionWatcher.$new($scope, 'data'), scopeInitializer = Swagger2ScopeInitializer.$new($scope, 'data'), isInsideSidebar = null, timeoutLoadData = null, timeoutUpdateData = null, observedDeregFns = [], observedAttrs = [], invokeReadyCallback = _.once(function() {
                // Handle `dw-ready`
                var readyCallback = _.get($scope, $attrs.dwReady);
                _.isFunction(readyCallback) && readyCallback(new WidgetAreaComponentCtrl());
            });
            // Note: This `$http` service configuration is important to execute all requests against the customization
            // API uncached. This is required to prevent displaying outdated data views. - Steffen
            $scope.httpConfig = _.isPlainObject(httpConfig) ? httpConfig : {
                cache: !1
            };
            // Add event listener for `dw.ui.core.generate` in order to be informed about updates to `dwx$data`
            $scope.$on('dw.ui.core.generate', updateData);
            $element.on('$destroy', onElementDestroy);
            $scope.$on('$destroy', onDestroy);
            _.isNotBlank($attrs.href) ? $attrs.$observe('href', loadData) : $scope.$watch($attrs.dwParams, loadData);
            // Expose API
            this.meta = function() {
                return _.cloneDeep($scope.dwx$widgets);
            };
            this.data = function() {
                return _.cloneDeep($scope.dwx$data);
            };
            this.componentCache = obtainComponentCache;
            WidgetAreaComponentCtrl.prototype.isValid = function() {
                // Identify `<form>` sub-elements that have to be considered for widget area validation purposes.
                // These forms have to be marked with a `data-dw-widget-form` attribute. All other forms will be
                // ignored.
                var forms = $element[0].querySelectorAll('[data-dw-widget-form]');
                return _.every(forms, function(form) {
                    var formCtrl = angular.element(form).controller('form');
                    return !!formCtrl && formCtrl.$valid !== !1;
                });
            };
            WidgetAreaComponentCtrl.prototype.get = function(property) {
                if (_.isBlank(property)) {
                    return _.cloneDeep($scope.data);
                }
                return _.cloneDeep(_.get($scope.data, property));
            };
            WidgetAreaComponentCtrl.prototype.set = function(property, value) {
                ObjectUtils.set($scope.data, property, value);
                return this;
            };
            WidgetAreaComponentCtrl.prototype.templates = function() {
                return angular.element($element[0].querySelector('DWX\\:INCLUDE')).data('dw$templates');
            };
            WidgetAreaComponentCtrl.prototype.post = function(data) {
                if ($scope.href) {
                    data = Swagger2PostDataPreparer.prepare($scope.widgets, data || $scope.data);
                    return $http.post($sce.getTrustedResourceUrl($scope.href), data, {
                        params: _.get($scope, $attrs.dwParamsPost),
                        dw$scope: $scope,
                        responseType: 'json'
                    });
                }
                return $q.reject();
            };
        } ]
    };
} ]);

dw$.directive('cscAttributeForm', [ 'ObjectPath', 'Swagger2FormBuilder', 'Validator', 'Swagger2ValidatorRuleBuilder', 'Swagger2ConditionWatcher', 'ObjectUtils', function(ObjectPath, Swagger2FormBuilder, Validator, Swagger2ValidatorRuleBuilder, Swagger2ConditionWatcher, ObjectUtils) {
    function propertyGetter(fieldName) {
        return ObjectPath.format(ObjectPath.parse('data.' + fieldName));
    }
    return {
        restrict: 'E',
        replace: !1,
        transclude: !0,
        require: [ '?^cscWidgetArea', '?^cscCustomDataTable', '?^cscProductList' ],
        scope: {
            data: '=dwModel',
            dwMeta: '='
        },
        template: function() {
            var formName = _.uniqueId('dwx$form'), validatorName = _.uniqueId('dwx$validator');
            return "<div class=\"csc-attribute-form-widget\">  <ng-form data-dw-widget-form=\"true\" name=\"" + formName + '" dw-validate="' + validatorName + "\" novalidate autocomplete=\"off\"></ng-form></div>";
        },
        link: function($scope, $element, $attrs, ctrls, transcludeFn) {
            function updateTemplates(definitions) {
                // Clear `<form>` element
                formEl.empty();
                // Set `widgets` property in order to support nested components
                $scope.widgets = ctrl.meta();
                // Set `dw$templates`
                definitions && formEl.data('dw$templates', formBuilder.build(definitions));
                // Transclude content into `<form>` element using the current scope
                transcludeFn($scope, function(clone) {
                    formEl.append(clone);
                });
                definitions ? // Create `validator`
                $scope[validatorName] = Validator.of({
                    data: Swagger2ValidatorRuleBuilder.build(definitions)
                }) : $scope[validatorName] = null;
            }
            function updateMeta(definitions) {
                if (!conditionWatcher) {
                    // Scope has already been destroyed
                    return;
                }
                if (_.isArray(definitions)) {
                    conditionWatcher.reset();
                    conditionWatcher.watch(definitions, function(defs) {
                        ObjectUtils.set($scope, 'dwMeta', defs);
                    });
                } else {
                    updateTemplates(definitions);
                }
            }
            function onElementDestroy() {
                conditionWatcher.reset();
                conditionWatcher = null;
                $scope[validatorName] = null;
                formEl = formNode = formName = formBuilder = validatorName = null;
                deregFn && deregFn();
                deregFn = null;
            }
            var ctrl = _.find(ctrls, _.negate(_.isUndefinedOrNull));
            if (!ctrl) {
                // This can happen during full screen/DOM updates
                return;
            }
            // Init form builder
            var formNode = $element[0].querySelector('ng-form'), formEl = angular.element(formNode), formName = formNode.getAttribute('name'), formBuilder = Swagger2FormBuilder.$new($scope, formName, propertyGetter), validatorName = formNode.getAttribute('dw-validate'), deregFn = null, conditionWatcher = Swagger2ConditionWatcher.$new($scope, 'data');
            // Initialize screen
            updateMeta($scope.dwMeta);
            // Reference watcher for `dwMeta`. `<csc-widget-area>` will update `dwMeta` reference based on matching conditions.
            deregFn = $scope.$watch('dwMeta', updateMeta);
            // Important: We need to take care of watcher deregistration on element destruction. - Steffen
            $element.on('$destroy', onElementDestroy);
        }
    };
} ]);

dw$.directive('cscAttributeLayout', [ 'ObjectPath', 'Swagger2DisplayBuilder', 'Swagger2ConditionWatcher', 'ObjectUtils', function(ObjectPath, Swagger2DisplayBuilder, Swagger2ConditionWatcher, ObjectUtils) {
    function propertyGetter(fieldName) {
        return ObjectPath.format(ObjectPath.parse('data.' + fieldName));
    }
    return {
        restrict: 'E',
        replace: !1,
        transclude: !0,
        require: [ '?^cscWidgetArea', '?^cscCustomDataTable', '?^cscProductList' ],
        scope: {
            data: '=dwModel',
            dwMeta: '='
        },
        template: '<div class="csc-attribute-layout-widget"></div>',
        link: function($scope, $element, $attrs, ctrls, transcludeFn) {
            function updateTemplates(definitions) {
                if (!displayBuilder) {
                    // Scope is already destroyed
                    return;
                }
                // Clear container element
                childEl.empty();
                // Set `widgets` property in order to support nested components
                $scope.widgets = ctrl.meta();
                // Set `dw$templates`
                definitions && childEl.data('dw$templates', displayBuilder.build(definitions));
                // Transclude cumputed content into `<div>` using the current scope
                transcludeFn($scope, function(clone) {
                    childEl.append(clone);
                });
            }
            function updateMeta(definitions) {
                if (!conditionWatcher) {
                    // Scope has already been destroyed
                    return;
                }
                if (_.isArray(definitions)) {
                    conditionWatcher.reset();
                    conditionWatcher.watch(definitions, function(defs) {
                        ObjectUtils.set($scope, 'dwMeta', defs);
                    });
                } else {
                    updateTemplates(definitions);
                }
            }
            function onElementDestroy() {
                conditionWatcher.reset();
                conditionWatcher = null;
                childEl = displayBuilder = null;
            }
            var ctrl = _.find(ctrls, _.negate(_.isUndefinedOrNull));
            if (!ctrl) {
                // This can happen during full screen/DOM updates
                return;
            }
            // Init display builder
            var childEl = angular.element($element.children()[0]), displayBuilder = Swagger2DisplayBuilder.$new($scope, propertyGetter), conditionWatcher = Swagger2ConditionWatcher.$new($scope, 'data');
            // Initialize screen
            updateMeta($scope.dwMeta);
            // Reference watcher for `dwMeta`. `<csc-widget-area>` will update `dwMeta` reference based on matching conditions.
            $scope.$watch('dwMeta', updateMeta);
            // Important: We need to take care of watcher deregistration on element destruction. - Steffen
            $element.on('$destroy', onElementDestroy);
        }
    };
} ]);

dw$.directive('cscAttributeListing', [ 'ObjectPath', 'Localized', 'Swagger2DisplayBuilder', 'Swagger2ConditionWatcher', 'ObjectUtils', function(ObjectPath, Localized, Swagger2DisplayBuilder, Swagger2ConditionWatcher, ObjectUtils) {
    function propertyGetter(fieldName) {
        return ObjectPath.format(ObjectPath.parse('data.' + fieldName));
    }
    function obtainDataAccessor($scope) {
        return function(fieldName) {
            return _.get($scope, propertyGetter(fieldName));
        };
    }
    /**
	 * Builds the column definition.
	 *
	 * @param {Object} $scope
	 * @param {Function} dataAccessor
	 * @returns {Array}
	 */
    function buildColumns($scope, dataAccessor) {
        function isNotEmpty(data) {
            if (_.isUndefinedOrNull(data)) {
                return !1;
            }
            return !_.isString(data) || _.isNotBlank(data);
        }
        var showEmpty = _.get($scope, 'dwConfig.show_empty') === !0, attributes = _.filter(_.get($scope, 'dwConfig.attributes'), function(attribute) {
            return showEmpty || isNotEmpty(dataAccessor(attribute));
        });
        return _.chunk(attributes, Math.ceil(attributes.length / $scope.columnCount));
    }
    return {
        restrict: 'E',
        replace: !1,
        require: [ '?^cscWidgetArea', '?^cscCustomDataTable', '?^cscProductList' ],
        scope: {
            data: '=dwModel',
            dwMeta: '=',
            dwConfig: '='
        },
        template: "<div ng-attr-class=\"csc-attribute-listing-widget csc-col-{{columnCount}}\" ng-class=\"{'csc-orientation-horizontal': dwConfig.orientation === 'horizontal'}\">  <div class=\"csc-col\" ng-repeat=\"attributes in columns\">    <div ng-repeat=\"attribute in attributes\"><dwx:replace ng-attr-name=\"{{attribute}}\"></dwx:replace></div>  </div></div>",
        link: function($scope, $element, $attrs, ctrls) {
            function updateTemplates(definitions) {
                if (!displayBuilder) {
                    // Scope is already destroyed
                    return;
                }
                // Set `dw$templates`
                definitions && $element.data('dw$templates', displayBuilder.build(definitions));
                _.has($scope, 'dwConfig.columns') && _.isNumber($scope.dwConfig.columns) && $scope.dwConfig.columns > 0 && ($scope.columnCount = $scope.dwConfig.columns);
                $scope.columns = buildColumns($scope, obtainDataAccessor($scope));
            }
            function updateMeta(definitions) {
                if (!conditionWatcher) {
                    // Scope has already been destroyed
                    return;
                }
                if (_.isArray(definitions)) {
                    conditionWatcher.reset();
                    conditionWatcher.watch(definitions, function(defs) {
                        ObjectUtils.set($scope, 'dwMeta', defs);
                    });
                } else {
                    updateTemplates(definitions);
                }
            }
            function onElementDestroy() {
                conditionWatcher.reset();
                conditionWatcher = null;
                displayBuilder = null;
            }
            var ctrl = _.find(ctrls, _.negate(_.isUndefinedOrNull));
            if (!ctrl) {
                // This can happen during full screen/DOM updates
                return;
            }
            // Default column settings
            $scope.columnCount = 2;
            // Init display builder
            var displayBuilder = Swagger2DisplayBuilder.$new($scope, propertyGetter, !0), conditionWatcher = Swagger2ConditionWatcher.$new($scope, 'data');
            // Initialize screen
            updateMeta($scope.dwMeta);
            // Reference watcher for `dwMeta`. `<csc-widget-area>` will update `dwMeta` reference based on matching conditions.
            $scope.$watch('dwMeta', updateMeta);
            // Important: We need to take care of watcher deregistration on element destruction. - Steffen
            $element.on('$destroy', onElementDestroy);
        }
    };
} ]);

dw$.directive('cscLink', function() {
    return {
        restrict: 'E',
        replace: !1,
        scope: {
            data: '=dwModel'
        },
        template: '<div class="csc-link-widget"><a ng-attr-href="{{data.href}}" target="_blank">{{data.title || data.href}}</a></div>'
    };
});

dw$.directive('cscTabs', [ 'Forbidder', '$compile', '$timeout', 'ObjectUtils', function(Forbidder, $compile, $timeout, ObjectUtils) {
    return {
        restrict: 'E',
        replace: !1,
        require: '?^cscWidgetArea',
        scope: {
            dwWidgetId: '=',
            data: '=dwModel',
            dwConfig: '='
        },
        template: '<div class="csc-tabs-widget"></div>',
        controller: [ '$scope', '$element', function($scope, $element) {
            function TabCtrl(tabScope) {
                this.scope = tabScope;
            }
            $scope.state = {
                activeTab: null,
                isFocused: !1
            };
            $scope.tabCtrl = [ '$scope', function(tabScope) {
                return new TabCtrl(tabScope);
            } ];
            TabCtrl.prototype.load = function(idx) {
                var tabContentId = 'csc-tab-' + $scope.$id + '-' + idx, tabContentEl = angular.element($element[0].querySelector('#' + tabContentId)), tabCfg = _.get($scope, 'dwConfig.tabs[' + idx + ']'), href = _.get(tabCfg, 'href'), tpl = _.get(tabCfg, 'template');
                if (_.isNotBlank(href)) {
                    return this.renderForm(tabContentEl, href);
                }
                if (_.isNotBlank(tpl)) {
                    return this.render(tabContentEl, angular.element(tpl));
                }
            };
            TabCtrl.prototype.render = function(tabContentEl, contentEl) {
                tabContentEl.empty().append(contentEl);
                $compile(contentEl)(this.scope);
            };
            TabCtrl.prototype.renderForm = function(tabContentEl, href) {
                function templateTabContent() {
                    return "<div class=\"csc-tab-content\" ng-show=\"state.canFocus\" ng-click=\"onFocus()\">  <form novalidate autocomplete=\"off\" dw-default-action=\"save\">    <csc-widget-area href=\"" + href + "\" dw-ready=\"onWidgetAreaReady\"></csc-widget-area>  </form></div><div class=\"csc-tab-actions\" ng-show=\"state.canFocus && $parent.state.isFocused\">  <button class=\"dw-button\" ng-click=\"onBlur()\">{{'common.button.cancel' | Messages}}</button>  <button class=\"dw-button dw-button-primary\" ng-click=\"save()\" ng-disabled=\"!canSubmit()\">{{'common.button.save' | Messages}}</button></div>";
                }
                function onWidgetAreaReady(ctrl) {
                    widgetAreaCtrl = ctrl;
                }
                function save() {
                    if (!tabScope.canSubmit()) {
                        return;
                    }
                    $scope.onBlur();
                    widgetAreaCtrl.post().then(function(response) {
                        var data = _.get(response, 'data') || {};
                        $scope.$emit('csc.customization.update', data);
                    });
                }
                function canSubmit() {
                    return !!widgetAreaCtrl && widgetAreaCtrl.isValid();
                }
                var tabScope = this.scope, widgetAreaCtrl = null, deregFn = null;
                tabScope.state = {
                    canFocus: !1
                };
                // Initialize actions
                tabScope.onWidgetAreaReady = onWidgetAreaReady;
                tabScope.save = save;
                tabScope.canSubmit = canSubmit;
                // Add one-time listener in order to trigger the default focus behavior
                deregFn = tabScope.$on('csc.customization.data', function() {
                    deregFn();
                    $timeout(function() {
                        tabScope.state.canFocus = !0;
                    }, 100);
                });
                var areaEl = angular.element(templateTabContent());
                this.render(tabContentEl, areaEl);
            };
        } ],
        link: function($scope, $element, $attrs, widgetAreaCtrl) {
            function showTab(tab, idx) {
                $scope.state.activeTab = tab;
                ObjectUtils.set($scope, 'state.cache.activeTab', tab);
                var eventId = 'csc-tabs-disclose-' + $scope.$id + '-' + idx;
                $scope.$broadcast(eventId);
            }
            function obtainWidgetCache() {
                var tabsCache = widgetAreaCtrl.componentCache('csc-tabs'), widgetId = $attrs.dwWidgetId;
                _.has(tabsCache, widgetId) || ObjectUtils.set(tabsCache, widgetId, {});
                return _.get(tabsCache, widgetId);
            }
            function toggleFocused(focused) {
                if ($scope.state.isFocused === focused) {
                    return;
                }
                $scope.state.isFocused = focused;
                forbidder.toggle(focused);
            }
            var tabsCfg = _.get($scope, 'dwConfig.tabs', []);
            if (widgetAreaCtrl) {
                // Set `widgets` property in order to support nested components
                $scope.widgets = widgetAreaCtrl.meta();
                // Set `state.cache` property
                $scope.state.cache = obtainWidgetCache();
                // Update `state.activeTab` if required
                var activeTab = _.get($scope.state.cache, 'activeTab');
                if (_.isNotBlank(activeTab) && activeTab !== $scope.state.activeTab) {
                    // See if the supposed to be activated tab has a truthy condition
                    var tabIdx = parseInt(activeTab.replace(/^csc-tab-/, ''), 10), tabCfg = tabsCfg[tabIdx], tabCondition = _.get(tabCfg, 'condition'), tabConditionValue = !_.isNotBlank(tabCondition) || $scope.$eval(tabCondition);
                    tabConditionValue && ($scope.state.activeTab = activeTab);
                }
            }
            // Initialize actions
            $scope.showTab = showTab;
            $scope.onFocus = _.wrap(!0, toggleFocused);
            $scope.onBlur = _.wrap(!1, toggleFocused);
            var tabTpls = [ '<ul class="dw-tabs dw-tabs-horizontal">' ], tabContentTpls = [ '<div class="csc-tabs-body">' ];
            _.forEach(tabsCfg, function(tabCfg, tabIdx) {
                var tabId = 'csc-tab-' + tabIdx, tabCondition = _.get(tabCfg, 'condition'), hasTabCondition = _.isNotBlank(tabCondition), tabConditionValue = !hasTabCondition || $scope.$eval(tabCondition);
                _.isNull($scope.state.activeTab) && tabConditionValue && (// Ensure that the first tab with a truthy condition is considered the `activeTab`
                $scope.state.activeTab = tabId);
                tabTpls.push('<li class="dw-tabs-item" ng-class="{\'is-active\': state.activeTab === \'' + tabId + '\'}"' + (hasTabCondition ? ' ng-show="' + tabCondition + '"' : '') + '><a class="dw-tabs-link" role="tab" ng-click="showTab(\'' + tabId + '\', ' + tabIdx + ')">' + tabCfg.title + '</a></li>');
                var ctrlId = 'tabCtrl' + tabIdx, isActiveTab = tabId === $scope.state.activeTab, suffix = $scope.$id + '-' + tabIdx, tabContentId = 'csc-tab-' + suffix, eventId = 'csc-tabs-disclose-' + suffix;
                tabContentTpls.push('<div class="csc-tab" ng-show="state.activeTab === \'' + tabId + '\'' + (hasTabCondition ? ' && (' + tabCondition + ')' : '') + '">');
                !isActiveTab && tabContentTpls.push('<dw:defer dw-until="' + eventId + '">');
                tabContentTpls.push('<div id="' + tabContentId + '" ng-controller="tabCtrl as ' + ctrlId + '" ng-init="' + ctrlId + '.load(' + tabIdx + ')"></div>');
                !isActiveTab && tabContentTpls.push('</dw:defer>');
                tabContentTpls.push('</div>');
            });
            tabTpls.push('</ul>');
            tabContentTpls.push('</div>');
            // Compile tabs template into the widget's content
            var contentEl = angular.element($element.children()[0]);
            contentEl.html(tabTpls.join('')).append(tabContentTpls.join(''));
            $compile(contentEl)($scope);
            // Initialize `Forbidder` instance
            var forbidder = Forbidder.$new($element[0].querySelector('.csc-tabs-body'), function(el) {
                return el.hasClass('dw-app');
            });
            $element.on('$destroy', function() {
                tabTpls = null;
                tabContentTpls = null;
                contentEl = null;
                forbidder = null;
            });
        }
    };
} ]);

dw$.directive('cscText', [ 'Localized', function(Localized) {
    return {
        restrict: 'E',
        replace: !1,
        scope: {
            data: '=dwModel'
        },
        template: '<div class="csc-text-widget"><strong>{{text}}</strong></div>',
        link: function($scope) {
            $scope.$watch('data', function(text) {
                $scope.text = _.isPlainObject(text) ? Localized.get(text) : text;
            });
        }
    };
} ]);

dw$.invoke('Urls', 'Workspaces', 'Permissions', function(Urls, Workspaces, Permissions) {
    Workspaces.app('baskets', {
        controller: 'xcBasketsCtrl',
        template: '<csc-customer-baskets dw-model="customer" dw-show-basket="showBasket"></csc-customer-baskets>',
        authorize: Permissions.orderCreate
    });
    Workspaces.space('crosscloud', {
        js: [ 'js/dw.ui.ecom.csc.module.common.js', 'js/dw.ui.ecom.csc.module.customers.js', 'js/dw.ui.ecom.csc.module.crosscloud.js' ],
        i18n: [ Urls.i18n('csc_crosscloud'), Urls.i18n('csc_customers') ],
        route: {
            baskets: {
                browserTitle: 'crosscloud.browser.title.baskets',
                title: 'crosscloud.title.baskets',
                apps: [ 'baskets' ],
                layout: {
                    type: '1x1'
                }
            }
        }
    });
});

dw$.invoke('Urls', 'Workspaces', 'Permissions', function(Urls, Workspaces, Permissions) {
    Workspaces.app('customerSearch', {
        controller: 'CustomerSearchCtrl',
        template: '<dw:scroller class="csc-customer-search"><div class="csc-custom-data-table" dw-table-id="customer_search" dw-column="1"><dw:id>customerGrid</dw:id><dw:grid dw-id="customerGrid"><dw:grid-data dw-source="customerSearchSource" dw-search-model="searchModel"></dw:grid-data><dw:grid-column dw-model="customer_no" dw-header="customers.grid.column.customers.customerNumber"><div ng-controller="customerGridActionsCtrl"><button class="dw-button dw-button-link csc-customerNumber" ng-click="showCustomer()" dw-tooltip-text="showCustomerTooltip">{{dw$row.customer_no}}</button></div></dw:grid-column><dw:grid-column dw-header="common.grid.column.empty" dw-sortable="false"><div ng-controller="customerGridActionsCtrl"><button class="dw-button csc-newOrderFromCustomer" ng-click="createOrder()" dw-tooltip-text="createOrderTooltip">{{\'customers.gridAction.customers.createOrder.label\' | Messages}}</button> <button class="dw-button csc-browseOnBehalfOf" ng-click="browseOnBehalf()" dw-tooltip-text="browseOnBehalfTooltip" ng-disabled="!enableBrowseOnBehalf">{{\'customers.gridAction.customers.browseOnBehalf.label\' | Messages}}</button></div></dw:grid-column></dw:grid><dw:transclude-content dw-element="customerGrid" dw-target=".dw-above"><div class="csc-above-left"><dw:search dw-model="searchModel" dw-grid="customerGrid" dw-filter-source="customerSearchFilterSource" dw-placeholder="customers.message.placeholder.customerSearch" dw-default-focus></dw:search></div><div class="csc-above-right"><button class="dw-button dw-button-primary csc-newCustomer" ng-click="createCustomer()" ng-disabled="!state.enableCreateCustomer"><span class="dw-icon dw-glyph-circle-o-notch dw-glyph-spin dw-icon-pull-left" role="img" ng-show="state.loadingCreateCustomer"></span><span class="dw-label">{{\'customers.button.createCustomer\' | Messages}}</span></button></div></dw:transclude-content></div></dw:scroller>',
        header: !1,
        authorize: Permissions.orderCreate
    });
    Workspaces.app('customerEdit', {
        controller: 'CustomerEditCtrl',
        template: '<dw:transclude-content dw-element="header" dw-target=".dw-title"><i class="dw-glyph-user"></i> {{customerEditHeader}}</dw:transclude-content><dw:transclude-content dw-element="header" dw-target=".dw-tools"><button class="dw-button csc-browseOnBehalfOf" ng-click="browseOnBehalf()" ng-disabled="!customer || !state.enableBrowseOnBehalf">{{\'customers.button.browseOnBehalf\' | Messages}}</button> <button class="dw-button csc-resetPassword" ng-click="passwordReset()" ng-disabled="!customer || state.readOnly">{{\'customers.button.passwordReset\' | Messages}}</button> <button class="csc-custom-actions" dw-model="state.customActions" dw-handler="reload">{{\'common.button.more\' | Messages}}</button> <button class="dw-button dw-button-primary csc-editCustomer" ng-click="editCustomer()" ng-disabled="!customer || !state.enableEditCustomer"><span class="dw-icon dw-glyph-circle-o-notch dw-glyph-spin dw-icon-pull-left" role="img" ng-show="state.loadingEditCustomer"></span><span class="dw-label">{{\'customers.button.editCustomer\' | Messages}}</span></button></dw:transclude-content><dw:scroller><div class="csc-customer-summary"><csc-widget-area dw-area-id="customer_summary" dw-params="widgetAreaParams"></csc-widget-area></div><dw:tabs><dw:tab dw-title="customers.title.orders" dw-name="orders"><csc-customer-orders dw-model="customer"></csc-customer-orders></dw:tab><dw:tab dw-title="customers.title.baskets" dw-name="baskets"><csc-customer-baskets dw-model="customer"></csc-customer-baskets></dw:tab><dw:tab dw-title="customers.title.addresses" dw-name="addresses"><csc-customer-addresses dw-model="customer"></csc-customer-addresses></dw:tab></dw:tabs></dw:scroller>',
        authorize: Permissions.orderCreate
    });
    Workspaces.space('customers', {
        js: [ 'js/dw.ui.ecom.csc.module.common.js', 'js/dw.ui.ecom.csc.module.customers.js' ],
        css: 'css/dw.ui.ecom.csc.module.customers.css',
        i18n: Urls.i18n('csc_customers'),
        route: {
            '': {
                browserTitle: 'customers.browser.title.customerSearch',
                title: 'customers.title.customerSearch',
                apps: [ 'customerSearch' ],
                layout: {
                    type: '1x1'
                }
            },
            edit: {
                title: 'customers.title.customerEdit.temp',
                apps: [ 'customerEdit' ],
                layout: {
                    type: '1x1'
                }
            }
        }
    });
});

dw$.invoke('Urls', 'Workspaces', 'Permissions', function(Urls, Workspaces, Permissions) {
    Workspaces.app('orderSearch', {
        controller: 'OrderSearchCtrl',
        template: '<dw:scroller class="csc-order-search"><div class="csc-custom-data-table" dw-table-id="order_search" dw-column="1" dw-position="after"><dw:id>orderGrid</dw:id><dw:grid dw-id="orderGrid" dw-ready="actions.orderGridReady"><dw:grid-data dw-source="state.orderSearchSource" dw-search-model="state.searchModel"></dw:grid-data><dw:grid-column dw-model="order_no" dw-header="orders.grid.column.orders.orderNumber.title"><div ng-controller="orderGridCtrl"><span ng-if="state.permissions.orderCreate"><dw:button dw-label-text="dw$row.order_no" dw-tooltip-text="showOrderTooltip" dw-handler="showOrder" class="dw-linkbutton csc-orderNumber"></dw:button></span><span ng-if="!state.permissions.orderCreate">{{dw$row.order_no}}</span></div></dw:grid-column><dw:grid-column dw-model="order_total" dw-header="orders.grid.column.orders.orderTotal.title" dw-sortable="false"><oc-money dw-model="dw$row.order_total" dw-currency="dw$row.currency"></oc-money></dw:grid-column></dw:grid><dw:transclude-content dw-element="orderGrid" dw-target=".dw-above"><div class="csc-above-left"><dw:search dw-model="state.searchModel" dw-grid="orderGrid" dw-search-filters="state.orderSearchFilters" dw-filter-source="state.orderSearchFilterSource" dw-placeholder="orders.message.placeholder.orderSearch" dw-default-focus oc-filter-override="actions.advancedSearch"></dw:search></div><div class="csc-above-right"><button class="dw-button dw-button-primary csc-newOrder" ng-click="actions.createOrder()" ng-disabled="!state.permissions.orderCreate">{{\'orders.button.createOrder\' | Messages}}</button></div></dw:transclude-content></div></dw:scroller>',
        header: !1,
        authorize: Permissions.orderSearch
    });
    Workspaces.app('orderCreate', {
        controller: 'OrderCreateCtrl',
        template: '<!-- Empty -->',
        authorize: Permissions.orderCreate
    });
    Workspaces.app('orderAssemble', {
        controller: 'OrderAssembleCtrl',
        template: '<div class="csc-order-create" oc-baskets-ctrl><div class="row csc-order-summary"><div class="columns shrink"><div class="row"><div class="columns shrink"><span class="dw-glyph dw-glyph-user"></span></div><div class="columns"><csc-customer-select dw-model="basket"></csc-customer-select></div></div></div><div class="columns"><div class="row"><div class="columns shrink">{{\'orders.label.order.billTo\' | Messages}}</div><div class="columns"><csc-basket-billing-address-list dw-model="basket"></csc-basket-billing-address-list></div></div></div><div class="columns shrink"><button class="dw-button csc-action-guide" ng-click="displayFlashes()" ng-show="!state.canSubmitOrder">{{\'orders.button.displayFlashes\' | Messages}}</button> <button class="csc-custom-actions" dw-model="state.customActions" dw-static-actions="state.staticActions" dw-handler="reload">{{\'common.button.more\' | Messages}}</button> <button class="dw-button" ng-click="submitOrder()" ng-disabled="!basket || !state.canSubmitOrder || state.disableSubmitOrder" ng-class="{\'dw-button-primary\': state.canSubmitOrder}"><span class="dw-icon dw-icon-pull-left dw-glyph-circle-o-notch dw-glyph-spin" role="img" ng-show="state.loadingSubmitOrder"></span><span class="dw-label">{{\'orders.button.submitOrder\' | Messages}}</span></button></div></div><div><csc-widget-area dw-area-id="basket" dw-params="widgetAreaParams"></csc-widget-area></div></div>',
        header: !1,
        authorize: Permissions.orderCreate
    });
    Workspaces.app('orderEdit', {
        controller: 'OrderEditCtrl',
        template: '<div class="csc-order-edit"><div class="row csc-order-summary"><div class="columns small-6"><csc-order-status dw-model="order"></csc-order-status></div><div class="columns"><div class="dw-label">{{\'orders.summary.billingAddress.label\' | Messages}}</div><div><csc-order-address dw-model="order" dw-type="billing"></csc-order-address></div></div><div class="columns shrink csc-order-summary-payment-instruments" ng-if="order.payment_instruments.length > 0"><div class="dw-label">{{\'orders.summary.paymentMethod.label\' | Messages}}</div><div><csc-payment-instruments dw-model="order" dw-handler="deletePaymentMethod"></csc-payment-instruments></div><div><button class="dw-button dw-button-link" ng-click="showPaymentMethods()" ng-disabled="state.disableShowPayments">{{labelShowMorePayments}}</button></div></div><div class="columns shrink" ng-if="state.customActions.length > 0 || order.status === \'created\'"><button class="csc-custom-actions" dw-model="state.customActions" dw-handler="reload">{{\'common.button.more\' | Messages}}</button> <button class="dw-button dw-button-primary" ng-show="order.status === \'created\'" ng-click="addPaymentMethod()" ng-disabled="state.disableAddPayment"><span class="dw-icon dw-icon-pull-left" ng-class="{\'dw-glyph-circle-o-notch\': state.loadingAddPayment, \'dw-glyph-spin\': state.loadingAddPayment}" role="img"></span><span class="dw-label">{{\'orders.button.addPayment\' | Messages}}</span></button></div></div><div class="csc-order-shipments"><div class="csc-order-shipment" ng-repeat="shipment in order.shipments" ng-if="!!shipment.shipment_id"><div class="csc-order-shipment-data"><div class="csc-order-shipment-data-col1"><div class="csc-order-shipment-title">{{formatShipmentTitle(shipment, $index)}}</div><div class="csc-order-shipping-address"><div class="dw-label">{{\'orders.label.order.shipTo\'|Messages}}</div><csc-order-address dw-model="order" dw-shipment="shipment" dw-type="shipping"></csc-order-address></div></div><div class="csc-order-shipment-data-col2"><div class="csc-order-shipment-items csc-order-items"><dw:id>orderGrid</dw:id><dw:grid dw-id="orderGrid" dw-paging="false" dw-ready="productItemGridReady"><dw:grid-data dw-source="productItemGridSources[shipment.shipment_id]"></dw:grid-data><dw:grid-column dw-header="common.grid.column.empty" dw-width-pixels="70" dw-sortable="false"><csc-orderitem-image dw-model="dw$row"></csc-orderitem-image></dw:grid-column><dw:grid-column dw-header="orders.grid.column.products.name" dw-sortable="false" dw-width-percent="70" class="oc-grid-column-name"><div><span class="oc-name">{{dw$row.product_name}}</span> <span class="oc-bonus" ng-show="isTypeBonus(dw$row)">{{\'orders.label.productItem.bonus\'|Messages}}</span></div><div class="oc-product-variationattribute" ng-repeat="(id, valueId) in dw$row.variation_values"><span class="dw-label">{{variationAttributeName(dw$row, id)}}</span> <span class="dw-value">{{variationAttributeValue(dw$row, id, valueId)}}</span></div><div class="oc-id">{{dw$row.product_id}}</div><div class="oc-product-option" ng-repeat="option in dw$row.option_items">{{option.item_text}}</div></dw:grid-column><dw:grid-column dw-header="orders.grid.column.products.availability" dw-sortable="false" dw-width-percent="15"><csc-product-availability dw-model="dw$row"></csc-product-availability></dw:grid-column><dw:grid-column dw-header="orders.grid.column.products.quantity" dw-model="quantity" dw-sortable="false" dw-width-percent="15"></dw:grid-column><dw:grid-column dw-header="orders.grid.column.products.price" dw-sortable="false" dw-width-percent="15"><oc-orderitem-unit-price dw-model="dw$row" dw-order="order"></oc-orderitem-unit-price></dw:grid-column><dw:grid-column dw-header="orders.grid.column.products.tax" dw-sortable="false" dw-width-percent="15"><oc-money dw-model="dw$row.adjusted_tax" dw-currency="order.currency"></oc-money></dw:grid-column><dw:grid-column dw-header="orders.grid.column.products.total" class="dw-text-align-right" dw-sortable="false" dw-width-percent="15"><oc-orderitem-item-price dw-model="dw$row" dw-order="order"></oc-orderitem-item-price></dw:grid-column></dw:grid><dw:transclude-content dw-element="orderGrid" dw-target=".dw-tools"><div ng-show="{{shipment.tracking_number}}" class="dw-label csc-order-tracking-title">{{\'orders.label.order.trackingNumber\'| Messages : shipment.tracking_number }}</div></dw:transclude-content></div></div></div><div class="csc-order-shipment-properties"><div class="csc-order-shipment-shippingmethod"><div class="csc-order-shipment-shippingmethod-label">{{\'orders.label.order.shippingMethod\'|Messages}}</div><div class="csc-order-shipment-shippingmethod-value">{{shipment.shipping_method.name}}</div><dw:tooltip dw-enabled="!!shipment.shipping_method.description">{{shipment.shipping_method.description}}</dw:tooltip><oc-shipping-item-price dw-model="shipment.shipping_items[0]" dw-order="order"></oc-shipping-item-price></div></div></div></div><div class="row"><div class="columns small-6"><csc-order-notes dw-model="order"></csc-order-notes></div><div class="columns small-6"><csc-order-totals dw-model="order"></csc-order-totals></div></div></div>',
        header: !1,
        authorize: Permissions.orderCreate
    });
    Workspaces.space('orders', {
        js: [ 'js/dw.ui.ecom.csc.module.common.js', 'js/dw.ui.ecom.csc.module.orders.js' ],
        css: 'css/dw.ui.ecom.csc.module.orders.css',
        i18n: Urls.i18n('csc_orders'),
        route: {
            '': {
                browserTitle: 'orders.browser.title.orderSearch',
                title: 'orders.title.orderSearch',
                apps: [ 'orderSearch' ],
                layout: {
                    type: '1x1'
                }
            },
            create: {
                browserTitle: 'orders.browser.title.orderCreate',
                title: 'orders.title.orderCreate',
                apps: [ 'orderCreate' ],
                layout: {
                    type: '1x1'
                }
            },
            assemble: {
                browserTitle: 'orders.browser.title.orderCreate',
                title: 'orders.title.orderCreate',
                apps: [ 'orderAssemble' ],
                layout: {
                    type: '1x1'
                }
            },
            edit: {
                title: 'orders.title.orderEdit',
                apps: [ 'orderEdit' ],
                layout: {
                    type: '1x1'
                }
            }
        }
    });
});
}(function () { return this; }());